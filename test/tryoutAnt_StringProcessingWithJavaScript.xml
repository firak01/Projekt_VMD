<?xml version="1.0" encoding="UTF-8" ?>  
<project name="tryoutAnt_StringProcessingWithJavaScript"  default="compile" basedir="..">

<!-- ######## Scriptdefs ############################################################################--> 


 <!-- ########################### -->
<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
 <scriptdef name="stringLeftStringZZZ" language="javascript">
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returnstring" />     
     <![CDATA[
	   var text = attributes.get("text");
       var match = attributes.get("matchstring");
       
       sReturn = getStrLeftStr(text, match);
	   
       project.setProperty(attributes.get("returnstring"), sReturn);
	   
	   //aus JSZ - Kernel 
	   function getStrLeftStr(sourceStr, keyStr){
		return (sourceStr.indexOf(keyStr) == -1 | keyStr=='') ? '' : sourceStr.split(keyStr)[0];
		}
     ]]>
  </scriptdef>

 <!-- ########################### -->
<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
 <scriptdef name="stringSubStringZZZ" language="javascript">
     <attribute name="text" />
     <attribute name="start" />
     <attribute name="end" />
     <attribute name="property" />
     <![CDATA[
       var text = attributes.get("text");
       var start = attributes.get("start");
       var end = attributes.get("end") || text.length();
       project.setProperty(attributes.get("property"), text.substring(start, end));
     ]]>
  </scriptdef>
  
<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <target name="compile" depends="-myTestStringSubstring,-myTestStringLeft">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
	<target name="-myTestStringSubstring">
		<echo>myTestStringSubstring: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<stringSubstringZZZ text="asdfasdfasdf" start="2" end="10" property="subtext" />
		<echo message="subtext = ${subtext}" />
		
		<stringSubStringZZZ text="asdfasdfasdf" start="0" end="1" property="subtext" />
		<echo message="subtext = ${subtext}" />
	</target> 
	
	<target name="-myTestStringLeft">
		<echo>myTestStringLeft: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<stringLeftStringZZZ text="asdfasdfasdf" matchstring="fas" returnstring="lefttext" />
		<echo message="lefttext = ${lefttext}" />
		
		<stringLeftStringZZZ text="asdfasdfasdf" matchstring="sdf" returnstring="lefttext" />
		<echo message="lefttext = ${lefttext}" />
	</target> 
 </project>