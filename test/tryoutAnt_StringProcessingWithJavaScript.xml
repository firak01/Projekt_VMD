<?xml version="1.0" encoding="UTF-8" ?>  
<project name="tryoutAnt_StringProcessingWithJavaScript"  default="compile" basedir="..">

<!-- ######## Scriptdefs ############################################################################--> 


<!-- ########################### -->
<!-- TODO: Diese Funktion in den JSZ-Kernel uebernehmen -->
 <scriptdef name="stringContainsStringZZZ" language="javascript">
 <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returnboolean" />     
     <![CDATA[
	   var text = attributes.get("text");
       var match = attributes.get("matchstring");
       
       var bReturn = text.indexOf(match)> -1;
	   
       project.setProperty(attributes.get("returnboolean"), bReturn);
     ]]>
  </scriptdef>
  
  <!-- ########################### -->
<!-- TODO: Diese Funktion in den JSZ-Kernel uebernehmen -->
 <scriptdef name="stringCountStringZZZ" language="javascript">
 <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returninteger" />     
     <![CDATA[
	   var text = attributes.get("text");
       var match = attributes.get("matchstring");
       	   
	   //Merke: So bindet man per Prototype erzeugte, die Klassen erweiternde Methoden in dieses CDATA-Konstrukt ein.   
	   String.prototype.count = function(lit, cis) {
	    //lit is the string to search for ( such as 'ex' ), and 
	    //cis is case-insensitivity, defaulted to false, it will allow for choice of case insensitive matches.
		var m = this.toString().match(new RegExp(lit, ((cis) ? "gi" : "g")));
		return (m != null) ? m.length : 0;
	  }
	  
       var iReturn = text.count(match, false);	   
	   
       project.setProperty(attributes.get("returninteger"), iReturn);
	   	   
	  
     ]]>
  </scriptdef>

 <!-- ########################### -->
 <scriptdef name="stringLeftStringZZZ" language="javascript">
 <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returnstring" />     
     <![CDATA[
	   var text = attributes.get("text");
       var match = attributes.get("matchstring");
       
       sReturn = getStrLeftStr(text, match);
	   
       project.setProperty(attributes.get("returnstring"), sReturn);
	   
	   //aus JSZ - Kernel 
	   function getStrLeftStr(sourceStr, keyStr){
		return (sourceStr.indexOf(keyStr) == -1 | keyStr=='') ? '' : sourceStr.split(keyStr)[0];
		}
     ]]>
  </scriptdef>
  
  <!-- ########################### -->
	<scriptdef name="stringLeftBackStringZZZ" language="javascript">
   <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
   <!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returnstring" />     
     <![CDATA[
	  var text = attributes.get("text");
	  var match = attributes.get("matchstring");
      //print("matchstring="+match); 
	  
	   //! FEHLER, Z.B. BEI EINEM BEGINNENDEN BACKSLASH, darum encoden.
	   var matchToEncode=match;
	   var matchEncoded = encodeMyHtml(matchToEncode);
	   //print("encoded matchstring=" + matchEncoded);
	   
	   var textToEncode=text;
	   var textEncoded = encodeMyHtml(textToEncode);
	   //print("encoded textstring=" + textEncoded);
	  
      sReturn = getStrLeftBackStr(textEncoded, matchEncoded);
	  //print("return vor unescape: getStrLeftBackStr=" + sReturn);
	  sReturn = unescape(sReturn);
      project.setProperty(attributes.get("returnstring"), sReturn);
	   
	//äquivalent zu JSZ - Kernel
	//@LeftBack equivalent, !!! casesensitive
	function getStrLeftBackStr(sourceStr, keyStr){
		arr = sourceStr.split(keyStr);
		//arr.pop();		//entfernt das letzte Element aus dem Array
		arr.shift();		//entfernt das erste Element aus dem Array
		return (keyStr==null | keyStr=='') ? '' : arr.join();		
	}
	
	//TODO: In den JSZ Kernel bringen
		function encodeMyHtml(htmlToEncode) {
		 var encodedHtml = escape(htmlToEncode);
		 encodedHtml = encodedHtml.replace(/\//g,"%2F");
		 encodedHtml = encodedHtml.replace(/\?/g,"%3F");
		 encodedHtml = encodedHtml.replace(/=/g,"%3D");
		 encodedHtml = encodedHtml.replace(/&/g,"%26");
		 encodedHtml = encodedHtml.replace(/@/g,"%40");
		 return encodedHtml;
		 //merke: mit unescape(...) bekommt man den korrekten String wieder zurück.
	   }
  ]]>
  </scriptdef>
  

 <!-- ########################### -->
<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
  <scriptdef name="stringSubStringZZZ" language="javascript">
	<!-- ### ScriptDefs, u.a für die Stringverarbeitung, MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem wg. der Übersicht die Camelcase Variante beibehalten. ###-->
		 <attribute name="text" />
		 <attribute name="start" />
		 <attribute name="end" />
		 <attribute name="property" />
		 <![CDATA[
		   var text = attributes.get("text");
		   if(text==''){
		   //print("Leerstring im JS Teil stringSubStringZZZ");
		   project.setProperty(attributes.get("property"), '');
		   }else{
		   var start = attributes.get("start");
		   var end = attributes.get("end") || text.length();
		   project.setProperty(attributes.get("property"), text.substring(start, end));
		   }
		 ]]>
	</scriptdef>
  
<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!-- <target name="compile" depends="-myTestStringSubstring,-myTestStringLeftString,-myTestStringLeftBackString,-myTestStringContainsString,-myTestStringCountString"> -->
 <target name="compile" depends="-myTestStringCountString">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
  <target name="-myTestStringContainsString">
		<echo>myTestStringContainsString: </echo>
		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringContainsStringZZZ text="${totaltext01}" matchstring="sdf" returnboolean="bcontains" />
		<echo message="bcontains = ${bcontains}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="11111111111" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringContainsStringZZZ text="${totaltext02}" matchstring="sdf" returnboolean="bcontains" />		
		<echo message="bcontains = ${bcontains}" />
		
	</target> 
	
	
	<target name="-myTestStringCountString">
		<echo>myTestStringCountString: </echo>
		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringCountStringZZZ text="${totaltext01}" matchstring="sdf" returninteger="icontains" />
		<echo message="icontains = ${icontains}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="11111111111" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringCountStringZZZ text="${totaltext02}" matchstring="sdf" returninteger="icontains" />		
		<echo message="icontains = ${icontains}" />
		
	</target> 
  
	<target name="-myTestStringSubstring">
		<echo>myTestStringSubstring: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<stringSubstringZZZ text="asdfasdfasdf" start="2" end="10" property="subtext" />
		<echo message="subtext = ${subtext}" />
		
		<stringSubStringZZZ text="asdfasdfasdf" start="0" end="1" property="subtext" />
		<echo message="subtext = ${subtext}" />
	</target> 
	
	<target name="-myTestStringLeftString">
		<echo>myTestStringLeft: </echo>
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftStringZZZ text="asdfasdfasdf" matchstring="fas" returnstring="lefttext" />
		<echo message="lefttext = ${lefttext}" />
		
		<stringLeftStringZZZ text="asdfasdfasdf" matchstring="sdf" returnstring="lefttext" />
		<echo message="lefttext = ${lefttext}" />
	</target> 
	
	
	<target name="-myTestStringLeftBackString">
		<echo>myTestStringLeftBackString: </echo>
		<property name="totaltext" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringZZZ text="${totaltext}" matchstring="sdf" returnstring="leftbacktext" />
		<echo message="leftbacktext = ${leftbacktext}" />
		
	</target> 
 </project>