<?xml version="1.0" encoding="UTF-8" ?>  
<project name="test_ReflectionHandlingJsZZZ"   default="compile" basedir=".."
	xmlns:fl="antlib:it.haefelinger.flaka" 
	xmlns:ac="antlib://net/sf/antcontrib"><!-- damit definiert man für antcontrib , bzw. FLAKA einen eigenen Namespace. Antcontrib wird hier per taskdef (siehe unten) hinzugefügt. -->

	<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
<!-- ######## Scriptdefs ############################################################################--> 
<!-- ########################### -->
 <!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in den eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten. -->
 <scriptdef name="tryout_errorHandlingJs" language="javascript">
     <attribute name="inputfilepath" />
     <attribute name="returnstring" />
	 <attribute name="returncontrol" />
	 <attribute name="returncontrolstring" />
     <![CDATA[			
			//Einfaches TryOut, wie man einen Fehler aus JavaScript zurückgeben kann.
			//Dabei wird in Java7 generell kein Stacking Objekt erzeugt und die Infos (z.B. die Zeilennummer) sind nicht so direkt abrufbar.
			//###############################################################################################################################
					
			var sReturn="";
			var bReturn=false; //Wird hier nicht zurueckgegeben
			var bReturnControl=false;
			var sReturnControl="Fehler";
				
			//Die benoetigten Kernel-Funktionen laden
			//There is no "pass by reference" available in JavaScript. You can pass an object (which is to say, you can pass-by-value a reference to an object) and then have a function modify the object contents:
			var objKernelLibs = new Array();
			var objControlCaller=new Object();
			var bReturn = enableKernelAntJs(objKernelLibs, objControlCaller);
			if(!objControlCaller.bReturnControl){								
				bReturn=false;
				sReturn="";
			}else{			
				var sInputFilepath=attributes.get("inputfilepath");				
				sReturn=tryout_errorHandling(sInputFilepath, objKernelLibs, objControlCaller);		
				if(!objControlCaller.bReturnControl){									
					bReturn=false;
					sReturn="";
				}else{					
					bReturn=true;
				}
			}	
			bReturnControl=objControlCaller.bReturnControl;
			sReturnControl=objControlCaller.sReturnControl;
			project.setProperty(attributes.get("returnstring"),sReturn);
			project.setProperty(attributes.get("returncontrol"),bReturnControl);
			project.setProperty(attributes.get("returncontrolstring"),sReturnControl);
						
			//###################################################################
            //#### KERNEL Libs
            //###################################################################			
			function enableKernelAntJs(objKernelLibs, objControl){			
				var sScript = "enableKernelAntJs: ";
				var bReturn=false; 
				var bReturnControl=false;
				var sReturnControl="Fehler";
				try{
					if(objKernelLibs==undefined || objKernelLibs==null){
						var err = new Error("objKernelLibs nicht deklariert.");
						throw err;
					}
					
					//Erstelle eine Array der grundlegenden JavaScript-Kernel Funktionen, die in externen Dateien ausgelagert wurden.								
					objKernelLibs[0] = new Object();
					objKernelLibs[0]["ALIAS"] = "ReflectCode";
					objKernelLibs[0]["DIRECTORY"] = "jsscriptdef";
					objKernelLibs[0]["FILE"] = "ZAnt.basic.zBasic.ReflectCodeZZZ.js";

					objKernelLibs[1] = new Object();
					objKernelLibs[1]["ALIAS"] = "HandleError";
					objKernelLibs[1]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[1]["FILE"] = "ZAnt.basic.zBasic.HandleErrorZZZ.js";
					
					objKernelLibs[2] = new Object();
					objKernelLibs[2]["ALIAS"] = "HandleError";
					objKernelLibs[2]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[2]["FILE"] = "ZAnt.basic.zBasic.JavaHelperZZZ.js";
					

					//REM Das Original aus dem grundlegendne Import-Tryout.
					//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( 'tryoutAnt_ImportJavascriptJs.js' ) ) );
					for (var i = 0; i < objKernelLibs.length; i++) { 															
						objKernelLibs[i]["LOADINGSTRING"] = "org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(\"../"+objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"]+"\"))";
						objKernelLibs[i]["LOADER"] = eval(objKernelLibs[i]["LOADINGSTRING"]); //Der LOADER kann dann mit eval(objKernelLibs[i]["LOADER"]) ausgeführt werden
					}
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k."
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
			
            //####################################################################################
			function tryout_errorHandling(sInputFilepath,objKernelLibs,objControl){																
				var sReturn="TEST sReturn";		
				var bReturnControl=false;
				var sReturnControl="Fehler";	
				try{
					//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG				
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben.");
					} else {												
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							//print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 									
								eval(objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.								
							}
						}
					}
					
					var objControlCaller = new Object();
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCallingName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";
					print(sScript+"START");
				
					var sInputfilePath=attributes.get("inputfilepath");
					print("Startparameter: "+sInputFilepath);				
									
					if(sInputFilepath==''){
						var myError = new Error("Mein Testfehler aus JS wegen leerem Startparamter.");
						throw myError;
					}
					
					sReturn = "Test gefuellter Eingabeparameter.";
					bReturnControl=true;
					sReturnControl="Alles o.k.";
				}catch(err){
					//Funktioniert nicht mit Java7 (RHINO) gibt dort 0 zurück.
					//print("TEST, neues ErrorObjekt erzeugen und direkt die Zeilennummer ausgeben: "  + (new Error).lineNumber);	
				
					//#### SIMPLES ERROR HANDLING #######									
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
		    }			
	      ]]>
  </scriptdef>				

  <!-- ############################################################-->
	<scriptdef name="tryout_reflectMethodCallingNameJs" language="javascript">		 
		 <attribute name="returnstring" />
		 <attribute name="returncontrol" />
		 <attribute name="returncontrolstring" />
		<!-- Hiermit testet man das Reflection Handling.
             Es wird ein Error Objekt erzeugt und daraus der Name der aktuellen Methode geholt.
			 Dies ist z.B. wichtig um genauere Log-Ausgaben zu erzeugen und den Code generisch zu halten -->
				
		<![CDATA[		
		    //attributes.get("inputParameter_denEsHierNichtGibt");
			
			//There is no "pass by reference" available in JavaScript. You can pass an object (which is to say, you can pass-by-value a reference to an object) and then have a function modify the object contents:
			var sReturn="";
			var bReturn=false; //Wird hier nicht zurueckgegeben
			var bReturnControl=false;
			var sReturnControl="Fehler";
				
			//Die benoetigten Kernel-Funktionen laden
			var objKernelLibs = new Array();
			var objControlCaller=new Object();
			var bReturn = enableKernelAntJs(objKernelLibs, objControlCaller);
			if(!objControlCaller.bReturnControl){								
				bReturn=false;
				sReturn="";
			}else{				
				sReturn=tryout_reflectMethodCallingName(objKernelLibs, objControlCaller);
				if(!objControlCaller.bReturnControl){									
					bReturn=false;
					sReturn="";
				}else{					
					bReturn=true;
				}
			}	
			bReturnControl=objControlCaller.bReturnControl;
			sReturnControl=objControlCaller.sReturnControl;
			project.setProperty(attributes.get("returnstring"),sReturn);
			project.setProperty(attributes.get("returncontrol"),bReturnControl);
			project.setProperty(attributes.get("returncontrolstring"),sReturnControl);
						
			//###################################################################
            //#### KERNEL Libs
            //###################################################################			
			function enableKernelAntJs(objKernelLibs, objControl){			
				var sScript = "enableKernelAntJs: ";
				var bReturn=false; 
				var bReturnControl=false;
				var sReturnControl="Fehler";
				try{
					if(objKernelLibs==undefined || objKernelLibs==null){
						var err = new Error("objKernelLibs nicht deklariert.");
						throw err;
					}
					
					//Erstelle eine Array der grundlegenden JavaScript-Kernel Funktionen, die in externen Dateien ausgelagert wurden.								
					objKernelLibs[0] = new Object();
					objKernelLibs[0]["ALIAS"] = "ReflectCode";
					objKernelLibs[0]["DIRECTORY"] = "jsscriptdef";
					objKernelLibs[0]["FILE"] = "ZAnt.basic.zBasic.ReflectCodeZZZ.js";

					objKernelLibs[1] = new Object();
					objKernelLibs[1]["ALIAS"] = "HandleError";
					objKernelLibs[1]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[1]["FILE"] = "ZAnt.basic.zBasic.HandleErrorZZZ.js";
															
					objKernelLibs[2] = new Object();
					objKernelLibs[2]["ALIAS"] = "HandleError";
					objKernelLibs[2]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[2]["FILE"] = "ZAnt.basic.zBasic.JavaHelperZZZ.js";
					
					//REM Das Original aus dem grundlegendne Import-Tryout.
					//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( 'tryoutAnt_ImportJavascriptJs.js' ) ) );
					for (var i = 0; i < objKernelLibs.length; i++) { 															
						objKernelLibs[i]["LOADINGSTRING"] = "org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(\"../"+objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"]+"\"))";
						objKernelLibs[i]["LOADER"] = eval(objKernelLibs[i]["LOADINGSTRING"]); //Der LOADER kann dann mit eval(objKernelLibs[i]["LOADER"]) ausgeführt werden
					}
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k."
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
			//#####################################################################################################			
			function tryout_reflectMethodCallingName(objKernelLibs, objControl){	               
				var sReturn="nixnix"; //Ziel dieses Tests ist es den Namen der in der Unterfunktion ermitteltent aufrufenden Funktion an die aufrufende Ant-Script-Ebene zurueckzugeben.
				var bReturnControl=false;
				var sReturnControl="Fehler";					
				try{									
					//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben.");
					} else { 												
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 	
								eval(objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.							
							}
						}
					}
					
					print("################################");
					print("### versuche reflectMethodCurrentName HIER auszufuehren");
					var objControlCaller=new Object();										
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCallingName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";		
					print("Ausgefuehrt. Name der aktuellen Funktion: "+sScript);
					print("################################");
					
					print("################################");
					print("### versuche reflectMethodCallingName IN EINER UNTERFUNKTION auszufuehren");		
					sReturn = tryout_Sub01_Calling(objKernelLibs, objControlCaller);
					if(!objControlCaller.bReturnControl) throw new Error(sScript + objControlCaller.sReturnControl);
					print("Ausgefuehrt. Name der aktuellen Funktion, aus der Unterfunkton ermittelt: "+sReturn);
					print("################################");
					
					sReturnControl="Alles o.k."
					bReturnControl=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}
			
			function tryout_Sub01_Calling(objKernelLibs, objControl){
				var sReturn="nix"; //Ziel: Den Namen der aufrufenden funktin (also nicht dier dieser tryout_Sub01 Funktion) auf Ant-Script Ebene zu erhalten.
				var bReturnControl=false;
				var sReturnControl="Fehler";
				try{								
                    //IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben.");
					} else { 												
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 	
								eval(objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.							
							}
						}
					}	
					
					var objControlCaller=new Object();					
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";						
					print("Name der aktuellen (Unter-)Funktion: "+sScript);			
								
					print("Namen der aufrufenden Funktion holen...");
					var sCalling = reflectMethodCalling_Name(null, objControlCaller);
					if(!objControlCaller.bReturnControl) throw new Error(objControlCaller.sReturnControl);
					print("Name der aufrufenden Funktion: "+sCalling);	
					
					sReturn=sCalling;
					bReturnControl=true;
					sReturnControl="Alles o.k.";
				}catch(err){
					//Funktioniert nicht mit Java7 (RHINO) gibt dort 0 zurück.
					//print("TEST, neues ErrorObjekt erzeugen und direkt die Zeilennummer ausgeben: "  + (new Error).lineNumber);	

				
					//#### SIMPLES ERROR HANDLING #######									
					print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}			
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}
		]]>
	</scriptdef>
  
<!-- ############################################################-->
	 <scriptdef name="tryout_reflectMethodCurrentNameJs" language="javascript">		 
		 <attribute name="returnstring" />
		 <attribute name="returncontrol" />
		 <attribute name="returncontrolstring" />
		<!-- Hiermit testet man das Reflection Handling.
             Es wird ein Error Objekt erzeugt und daraus der Name der aktuellen Methode geholt.
			 Dies ist z.B. wichtig um genauere Log-Ausgaben zu erzeugen und den Code generisch zu halten -->
				
		<![CDATA[		
		    //attributes.get("inputParameter_denEsHierNichtGibt");
			
			//There is no "pass by reference" available in JavaScript. You can pass an object (which is to say, you can pass-by-value a reference to an object) and then have a function modify the object contents:
			var sReturn="";
			var bReturn=false; //Wird hier nicht zurueckgegeben
			var bReturnControl=false;
			var sReturnControl="Fehler";
				
			//Die benoetigten Kernel-Funktionen laden
			var objKernelLibs = new Array();
			var objControlCaller=new Object();
			var bReturn = enableKernelAntJs(objKernelLibs, objControlCaller);
			if(!objControlCaller.bReturnControl){								
				bReturn=false;
				sReturn="";
			}else{			
				sReturn=tryout_reflectMethodCurrentName(objKernelLibs, objControlCaller);													
				if(!objControlCaller.bReturnControl){									
					bReturn=false;
					sReturn="";
				}else{					
					bReturn=true;
				}
			}	
			bReturnControl=objControlCaller.bReturnControl;
			sReturnControl=objControlCaller.sReturnControl;
			project.setProperty(attributes.get("returnstring"),sReturn);
			project.setProperty(attributes.get("returncontrol"),bReturnControl);
			project.setProperty(attributes.get("returncontrolstring"),sReturnControl);
						
			//###################################################################
            //#### KERNEL Libs
            //###################################################################			
			function enableKernelAntJs(objKernelLibs, objControl){			
				var sScript = "enableKernelAntJs: ";
				var bReturn=false; 
				var bReturnControl=false;
				var sReturnControl="Fehler";
				try{
					if(objKernelLibs==undefined || objKernelLibs==null){
						var err = new Error("objKernelLibs nicht deklariert.");
						throw err;
					}
					
					//Erstelle eine Array der grundlegenden JavaScript-Kernel Funktionen, die in externen Dateien ausgelagert wurden.								
					objKernelLibs[0] = new Object();
					objKernelLibs[0]["ALIAS"] = "ReflectCode";
					objKernelLibs[0]["DIRECTORY"] = "jsscriptdef";
					objKernelLibs[0]["FILE"] = "ZAnt.basic.zBasic.ReflectCodeZZZ.js";

					objKernelLibs[1] = new Object();
					objKernelLibs[1]["ALIAS"] = "HandleError";
					objKernelLibs[1]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[1]["FILE"] = "ZAnt.basic.zBasic.HandleErrorZZZ.js";
										
					objKernelLibs[2] = new Object();
					objKernelLibs[2]["ALIAS"] = "HandleError";
					objKernelLibs[2]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[2]["FILE"] = "ZAnt.basic.zBasic.JavaHelperZZZ.js";
				
					//REM Das Original aus dem grundlegendne Import-Tryout.
					//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( 'tryoutAnt_ImportJavascriptJs.js' ) ) );
					for (var i = 0; i < objKernelLibs.length; i++) { 															
						objKernelLibs[i]["LOADINGSTRING"] = "org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(\"../"+objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"]+"\"))";
						objKernelLibs[i]["LOADER"] = eval(objKernelLibs[i]["LOADINGSTRING"]); //Der LOADER kann dann mit eval(objKernelLibs[i]["LOADER"]) ausgeführt werden
					}
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k."
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
			
			//#################################################################################
			function tryout_reflectMethodCurrentName(objKernelLibs, objControl){	              
				var sReturn="";
				var bReturnControl=false;
				var sReturnControl=sScript+"Fehler";				
				try{
					print("#######################");
					//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben.");
					} else { 												
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 	
								eval(objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.							
							}
						}
					}
					
					var objControlCaller=new Object();
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";						
					print("Name der aktuellen Funktion: "+sScript);	
					
										
					var objError = new Error();	//Das bekommt keinen Stacktrace Java 7. Bei der weiteren Verarbeitung beachten
					sReturn=reflectMethodCurrent_Name(objError, objControl);					
					if(!objControl.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControl.sReturnControl);
					print("Name der aktuellen Funktion, ermittelt aus einem Error Objekt: "+sReturn);
					
					sReturnControl="Alles o.k."
					bReturnControl=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}
			
		
		]]>
	</scriptdef>
	
	<!-- ############################################################-->
	<scriptdef name="tryout_reflectMethodCurrentNameFromSubJs" language="javascript">		 
		 <attribute name="returnstring" />
		 <attribute name="returncontrol" />
		 <attribute name="returncontrolstring" />
		<!-- Hiermit testet man das Reflection Handling.
             Es wird ein Error Objekt erzeugt und daraus der Name der aktuellen Methode geholt.
			 Dies ist z.B. wichtig um genauere Log-Ausgaben zu erzeugen und den Code generisch zu halten -->
				
		<![CDATA[		
		    //attributes.get("inputParameter_denEsHierNichtGibt");
			
			//Die benoetigten Kernel-Funktionen laden
			var objKernelLibs = new Array();
			var objControlCaller=new Object();
			var bReturn = enableKernelAntJs(objKernelLibs, objControlCaller);
			if(!objControlCaller.bReturnControl){								
				bReturn=false;
				sReturn="";
			}else{			
				sReturn=sReturn=tryout_reflectMethodCurrentNameFromSub(objKernelLibs, objControlCaller);													
				if(!objControlCaller.bReturnControl){									
					bReturn=false;
					sReturn="";
				}else{					
					bReturn=true;
				}
			}	
			bReturnControl=objControlCaller.bReturnControl;
			sReturnControl=objControlCaller.sReturnControl;
			project.setProperty(attributes.get("returnstring"),sReturn);
			project.setProperty(attributes.get("returncontrol"),bReturnControl);
			project.setProperty(attributes.get("returncontrolstring"),sReturnControl);
			
			//###################################################################
            //#### KERNEL Libs
            //###################################################################			
			function enableKernelAntJs(objKernelLibs, objControl){			
				var sScript = "enableKernelAntJs: ";
				var bReturn=false; 
				var bReturnControl=false;
				var sReturnControl="Fehler";
				try{
					if(objKernelLibs==undefined || objKernelLibs==null){
						var err = new Error("objKernelLibs nicht deklariert.");
						throw err;
					}
					
					//Erstelle eine Array der grundlegenden JavaScript-Kernel Funktionen, die in externen Dateien ausgelagert wurden.								
					objKernelLibs[0] = new Object();
					objKernelLibs[0]["ALIAS"] = "ReflectCode";
					objKernelLibs[0]["DIRECTORY"] = "jsscriptdef";
					objKernelLibs[0]["FILE"] = "ZAnt.basic.zBasic.ReflectCodeZZZ.js";

					objKernelLibs[1] = new Object();
					objKernelLibs[1]["ALIAS"] = "HandleError";
					objKernelLibs[1]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[1]["FILE"] = "ZAnt.basic.zBasic.HandleErrorZZZ.js";
										
					objKernelLibs[2] = new Object();
					objKernelLibs[2]["ALIAS"] = "HandleError";
					objKernelLibs[2]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[2]["FILE"] = "ZAnt.basic.zBasic.JavaHelperZZZ.js";
				
					//REM Das Original aus dem grundlegendne Import-Tryout.
					//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( 'tryoutAnt_ImportJavascriptJs.js' ) ) );
					for (var i = 0; i < objKernelLibs.length; i++) { 															
						objKernelLibs[i]["LOADINGSTRING"] = "org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(\"../"+objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"]+"\"))";
						objKernelLibs[i]["LOADER"] = eval(objKernelLibs[i]["LOADINGSTRING"]); //Der LOADER kann dann mit eval(objKernelLibs[i]["LOADER"]) ausgeführt werden
					}
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k."
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
			//##########################################################################################################			
			function tryout_reflectMethodCurrentNameFromSub(objKernelLibs, objControl){	               
				var sReturn="nixnix"; //Ziel dieses Tests ist es den Namen der in der Unterfunktion ermitteltent aufrufenden Funktion an die aufrufende Ant-Script-Ebene zurueckzugeben.
				var bReturnControl=false;
				var sReturnControl="Fehler";						
				try{
					print("#######################");
					//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben.");
					} else { 												
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 	
								eval(objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.							
							}
						}
					}
										
					var objControlCaller=new Object();				
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";		
					print("Name der aktuellen Funktion: "+sScript);
					
					sReturn = tryout_Sub01_Current(objKernelLibs, objControlCaller);
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControlCaller.sReturnControl);
					
					sReturnControl="Alles o.k."
					bReturnControl=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}
			
			function tryout_Sub01_Current(objKernelLibs, objControl){
				var sReturn="nix"; //Ziel: Den Namen der aufrufenden funktin (also nicht dier dieser tryout_Sub01 Funktion) auf Ant-Script Ebene zu erhalten.
				var bReturnControl=false;
				var sReturnControl="Fehler";						
				try{
					print("#######################");
					//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben.");
					} else { 												
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 	
								eval(objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.							
							}
						}
					}
					
					var objControlCaller=new Object();
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";		
					print("Name der aktuellen (Unter-)Funktion: "+sScript);			
													
					sReturn=sScript;
					bReturnControl=true;
					sReturnControl="Alles o.k.";
				}catch(err){
					//Funktioniert nicht mit Java7 (RHINO) gibt dort 0 zurück.
					//print("TEST, neues ErrorObjekt erzeugen und direkt die Zeilennummer ausgeben: "  + (new Error).lineNumber);	
				
					//#### SIMPLES ERROR HANDLING #######									
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}							
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}					
		]]>
	</scriptdef>

<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!--<target name="compile" depends="-myTestReflectMethodCurrentNameJs,-myTestReflectMethodCurrentNameFromSubJs,-myTestReflectMethodCallingNameJs,-myTryoutJavaScript_ErrorHandling, ">-->
 <target name="compile" depends="-myTryoutJavaScript_ErrorHandling">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
  <target name="-myTryoutJavaScript_ErrorHandling">
		<fl:let>sScript::='-myTryoutJavaScript_ErrorHandling: '</fl:let>
		<fl:let>sTrace::=""</fl:let>
		<echo>${sScript}Start</echo>

		<!-- Wende hier von antcontrib den try...catch mechanismus an. -->
		<trycatch property="myError" reference="myErrorObject">
		<try>
		
		 <!-- Hier wird die scriptdef Methode aufgerufen. Ein Leerstring führt zu einem Fehler (ExceptionZZZ) in der intern aufgerufenen JAZ-Kernel Klasse. -->
		 <fl:let>myInputFilepath::="c:\\temp"</fl:let>
		 <echo>${sScript}myInputFilepath='${myInputFilepath}'</echo>
		<tryout_errorHandlingJs inputfilepath="${myInputFilepath}" returnstring="myReturnValue" returncontrol="myReturnControl" returnControlString="myReturnControlString"/>
		<echo message="myReturnControl | myReturnConstrolString | myReturnValue = ${myReturnControl} | ${myReturnControlString} | ${myReturnValue}" />
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		
		 <!-- Hier wird die scriptdef Methode aufgerufen. Ein Leerstring führt zu einem Fehler (ExceptionZZZ) in der intern aufgerufenen JAZ-Kernel Klasse. -->
		  <fl:let>myInputFilepath::=""</fl:let>
		  <echo>${sScript}myInputFilepath='${myInputFilepath}'</echo>
		<tryout_errorHandlingJs inputfilepath="${myInputFilepath}" returnstring="myReturnValue" returncontrol="myReturnControl" returnControlString="myReturnControlString"/>
		<echo message="myReturnControl | myReturnConstrolString | myReturnValue = ${myReturnControl} | ${myReturnControlString} | ${myReturnValue}" />
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		</try>
		<catch>
			<echo>In &lt;catch&gt;.</echo>
			<echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo>
		</catch>

		<finally>
			<echo>In &lt;finally&gt;.</echo>
		</finally>
		</trycatch>		
	</target>
  
  
  <target name="-myTestReflectMethodCurrentNameJs">
		<fl:let>sScript::='-myTestReflectMethodCurentNameJs: '</fl:let>
		<echo>${sScript}Start</echo>
		<!--<ac:var name="myReturnControl" value="false" unset="true"/>-->
		<!--<ac:var name="myReturnControlString" value="Fehler" unset="true"/>-->
		<fl:let>myReturnControl::=false</fl:let>
		<fl:let>myReturnControlString::="Fehler"</fl:let>
		<echo message="1. myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->		
		<tryout_reflectMethodCurrentNameJs returnstring="myReturnString" returncontrol="myReturnControl" returncontrolstring="myReturnControlString" />
		<echo message="myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		<echo message="Ermittelter Methodenname = ${myReturnString}" />
		<echo message="############################" />
				
	</target> 
	
	<target name="-myTestReflectMethodCurrentNameFromSubJs">
		<fl:let>sScript::='-myTestReflectMethodCurrentNameFormSubNameJs: '</fl:let>
		<echo>${sScript}Start</echo>
		<!--<ac:var name="myReturnControl" value="false" unset="true"/>-->
		<!--<ac:var name="myReturnControlString" value="Fehler" unset="true"/>-->
		<fl:let>myReturnControl::=false</fl:let>
		<fl:let>myReturnControlString::="Fehler"</fl:let>
		<echo message="1. myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->		
		<tryout_reflectMethodCurrentNameFromSubJs returnstring="myReturnString" returncontrol="myReturnControl" returncontrolstring="myReturnControlString" />
		<echo message="myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		<echo message="In der Unterfunktion ermittelter Methodenname der aktuellen Unterfunktion= ${myReturnString}" />
		<echo message="############################" />
				
	</target> 
	
	<target name="-myTestReflectMethodCallingNameJs">
		<fl:let>sScript::='-myTestReflectMethodCallingNameJs: '</fl:let>
		<echo>${sScript}Start</echo>
		<!--<ac:var name="myReturnControl" value="false" unset="true"/>-->
		<!--<ac:var name="myReturnControlString" value="Fehler" unset="true"/>-->
		<fl:let>myReturnControl::=false</fl:let>
		<fl:let>myReturnControlString::="Fehler"</fl:let>
		<echo message="1. myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->		
		<tryout_reflectMethodCallingNameJs returnstring="myReturnString" returncontrol="myReturnControl" returncontrolstring="myReturnControlString" />
		<echo message="myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		<echo message="In der Unterfunktion ermittelter Name der aktuellen aufrufenden Funktion= ${myReturnString}" />
		<echo message="############################" />
				
	</target> 
 </project>