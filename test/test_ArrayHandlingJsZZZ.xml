<?xml version="1.0" encoding="UTF-8" ?>  
<project name="tryoutAnt_FlakaListHandling"   default="compile" basedir=".."
	xmlns:ac="antlib://net/sf/antcontrib"
	xmlns:fl="antlib:it.haefelinger.flaka"><!-- damit definiert man für FLAKA einen eigenen Namespace -->
	 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
	<!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedir in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<import file="../scriptdef/ZAnt_basic_zBasic_ExceptionZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_ArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_test_HelperZZZ.xml"/>
	
	  <!-- ### Einbinden von Ant-Contrib ### -->
   <!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!--    <taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	 <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" />
	 <taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" />
	 <taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" /> -->
	
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<!-- gebraucht wird das z.B. für den <for> </for> Task. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
		
<!-- ################################################################################# -->
<!-- Die einzelnen Tests im depends hinzufügen -->
<!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
			 	 			 
<!-- <target name="compile" depends="-declaration,-myTestArrayInitJsZZZ,-myTestArrayDebugJsZZZ,-myTestIsArrayEmptyJsZZZ,-myTestArrayStringTrimJsZZZ,-myTestArrayStringImplodeJsZZZ-myTestArrayGetJsZZZ,-myTestArrayPlusStringJsZZZ,-myTestArrayLeftBackStringJsZZZ,-myTestArrayAppendJsZZZ, -myTestArrayAppendArrayJsZZZ"> -->
<target name="compile" depends="-declaration,-myTestArrayLeftBackStringJsZZZ">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
  <target name="-declaration">
	  <!-- um EL referencen zusätzlich zu den normalen Ant Referencen anzustellen (außerhalb der Flaka Tasks), muss man die ant standard property 	helper engine austauschen.
	  dies passiert hier durch flaka´s install-property handler task -->
	  <fl:install-property-handler />	
  </target>
  
  <target name="-myTestArrayAppendJsZZZ">
		<fl:let>sScript::='-myTestArrayAppendJsZZZ: '</fl:let>
		<!-- Testen etwas an ein Array anzuhaengen -->
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef arrayAppendJsZZZ</fl:logo>	


		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 3 'initialisieren' -->
		<fl:let>
			myArraySize::=3; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<!-- Hier wird die scriptdef Methode arrayElementCountJsZZZ aufgerufen -->
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Wert an das Array anhängen -->
		<fl:let>
			mySingleValue::= "angehängter Wert"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 2 'initialisieren' -->	
		<fl:let>
			myArraySize::=2; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
	
		<!-- Wert an das Array anhängen -->
		<fl:let>
			mySingleValue::= "angehängter Wert"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		
		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 1 'initialisieren' -->
		<fl:let>
			myArraySize::=1; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
	
		<!-- Wert an das Array anhängen -->
		<fl:let>
			mySingleValue::= "angehängter Wert"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		
		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 0 'initialisieren' -->
		<fl:let>
			myArraySize::=0; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />	
	
		<!-- Wert an das Array anhängen -->
		<fl:let>
			mySingleValue::= "angehängter Wert"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
			
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
				
	<echo>###########################################################</echo>
		<!-- anderer Versuch: Array nur 'initialisieren' -->
		<fl:let>
			myArraySize::=; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		
		<!-- Wert an das Array anhängen -->
		<fl:let>
			mySingleValue::= "angehängter Wert"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
				
	</target>
	
	<target name="-myTestArrayAppendArrayJsZZZ">
		<fl:let>sScript::='-myTestArrayAppendArrayJsZZZ: '</fl:let>
		<!-- Testen etwas an ein Array anzuhaengen -->
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>myTestArrayAppendArrayJsZZZ:
		Meine Loesung: Scriptdef arrayAppendArrayJsZZZ</fl:logo>	


		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 3 'initialisieren' -->
		<fl:let>myArraySize::=3;</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<fl:let>myArraySize::=2;</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray2append"/>
		<echo>myArray nachher: ${myArray2append}</echo>
	
		<arrayValueTestFillJsZZZ arrayinput="${myArray2append}" ilbound="0" iubound="" arrayreturn="myArray2appendNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArray2appendNew}" arrayreturn="myArray2append" sflagcontrol="" />
		
		<!-- Wert des zweiten Arrays an das erste Array anhängen -->		
		<arrayAppendArrayJsZZZ arrayinput="${myArray}" array2append="${myArray2append}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>				
	</target>
  
	<target name="-myTestArrayGetJsZZZ">
		<fl:let>sScript::='-myTestArrayGetJsZZZ: '</fl:let>
		<!-- Teste einen Wert aus dem Array auszulesen. -->
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>myTestArrayGetJsZZZ:
		Meine Loesung: Scriptdef arrayGetJsZZZ</fl:logo>	

		<echo>### 1. Testaufbau: Array blanko 'initialisieren' ########################################################</echo>
		<fl:let>
			myArraySize::=; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArrayNew"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Hole Wert an den Stellen -1, 0, 1 -->
		<arrayGetJsZZZ arrayinput="${myArray}" index="-1" arrayget="myValue" sflagcontrol=""/>
		<echo>-1: Geholter Wert: ${myValue}</echo> 
		
		<arrayGetJsZZZ arrayinput="${myArray}" index="0" arrayget="myValue" sflagcontrol=""/>
		<echo> 0: Geholter Wert: ${myValue}</echo>
		
		<arrayGetJsZZZ arrayinput="${myArray}" index="1" arrayget="myValue" sflagcontrol=""/>
		<echo> 1: Geholter Wert: ${myValue}</echo>
			
		<echo>###  2. Testaufbau: Array mit 3 'initialisieren'  ########################################################</echo>
		<fl:let>
			myArraySize::=3; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Hole Wert an Stelle 1 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="1" arrayget="myValue" sflagcontrol=""/>
		<echo> 1: Geholter Wert: ${myValue}</echo>
	
		<echo>### 3. Testaufbau: Werte eingeben ########################################################</echo>
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->
	
		<!-- Hole Wert an Stelle 1 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="1" arrayget="myValue"/>
		<echo> 1: Geholter Wert: ${myValue}</echo>
		
		<echo>###  4. Testaufbau: Wert an das Array anhängen ########################################################</echo>
		<fl:let>
			mySingleValue::= "angehängter Wert"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->
		
		<!-- Hole Wert an Stelle 3 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="3" arrayget="myValue" sflagcontrol=""/>
		<echo> 3: Geholter Wert: ${myValue}</echo>	
				
		<!-- Hole Wert an Stellen 4 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="4" arrayget="myValue" sflagcontrol=""/>
		<echo> 4: Geholter Wert: ${myValue}</echo>
		
		<echo>###  5. Testaufbau: Wert 'mit BACKSLASH am Ende' an das Array anhängen ########################################################</echo>
		<fl:let>
			mySingleValue::= "angehängte Endung beachten\\"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->
		
		<echo>###  5a. Fall unescape ########################################################</echo>
		<!-- Hole Wert an Stelle 4 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="4" arrayget="myValue" sflagcontrol=""/>
		<echo> 4: Geholter Wert: ${myValue}</echo>	
				
		<!-- Hole Wert an Stellen 4 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="5" arrayget="myValue" sflagcontrol=""/>
		<echo> 5: Geholter Wert: ${myValue}</echo>
		
		
		<echo>###  5b. Fall raw. ########################################################</echo>		
		<!-- Hole Wert an Stelle 4 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="4" arrayget="myValue" sflagcontrol="raw"/>
		<echo> 4: Geholter Wert: ${myValue}</echo>	
				
		<!-- Hole Wert an Stellen 5 -->		
		<arrayGetJsZZZ arrayinput="${myArray}" index="5" arrayget="myValue" sflagcontrol="raw"/>
		<echo> 5: Geholter Wert: ${myValue}</echo>
		
	</target>

	<target name="-myTestArrayDebugJsZZZ">
		<fl:let>sScript::='-myTestArrayDebugJsZZZ: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>myTestArrayDebugJsZZZ:
		Meine Loesung: Scriptdef arrayDebugJsZZZ</fl:logo>		
		<fl:let>
			myArraySize::=2; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
	
		<!-- TODO : Kopiere den wert in den ursprünglichen Variablennamen -->
	
		<!-- Unterschiedliche Debug - Level testen -->	
		<arrayDebugJsZZZ arrayinput="${myArrayNew}" ilevel="0"/>
		
		<arrayDebugJsZZZ arrayinput="${myArrayNew}" ilevel="1"/>
		
		<arrayDebugJsZZZ arrayinput="${myArrayNew}" ilevel="2"/>
		
	</target> 
	
	
  <target name="-myTestArrayInitJsZZZ">
		<fl:let>sScript::='-myTestArrayInitJsZZZ: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>myTestArrayInitJsZZZ:
			Meine Loesung: Scriptdef arrayInitJsZZZ</fl:logo>		
		<fl:let>
			myArraySize::=; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Debug Ausgabe, wie das Array nun aussieht: -->
		<arrayDebugJsZZZ arrayinput="${myArray}" iLevel="1"/>
		
		<!-- Hier wird die scriptdef Methode arrayElementCountJsZZZ aufgerufen -->
		<arrayElementCountJsZZZ arrayinput="${myArray}" ireturn="iSize"/>
		<echo>ArrayGroesse von arrayElementCountJsZZZ: ${iSize}</echo><!-- Auch diese Methode darf nur 0 zurückgeben. -->
		<echo>myArray nachher (2): ${myArray}</echo><!-- hier muss <#!!FGLUNDEFINED!!#> drin stehen. -->
		
		<echo>#################################</echo>
		<fl:let>
			myArraySize::=0; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Debug Ausgabe, wie das Array nun aussieht: -->
		<arrayDebugJsZZZ arrayinput="${myArray}" iLevel="1"/>
		
		<!-- Hier wird die scriptdef Methode arrayElementCountJsZZZ aufgerufen -->
		<arrayElementCountJsZZZ arrayinput="${myArray}" ireturn="iSize"/>
		<echo>ArrayGroesse von arrayElementCountJsZZZ: ${iSize}</echo><!-- Auch diese Methode darf nur 0 zurückgeben. -->
		<echo>myArray nachher (2): ${myArray}</echo><!-- hier muss <#!!FGLUNDEFINED!!#> drin stehen. -->
		
		<echo>#################################</echo>
		
			<fl:let>
			myArraySize::=1; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Debug Ausgabe, wie das Array nun aussieht: -->
		<arrayDebugJsZZZ arrayinput="${myArray}" iLevel="1"/>
		
		<!-- Hier wird die scriptdef Methode arrayElementCountJsZZZ aufgerufen -->
		<arrayElementCountJsZZZ arrayinput="${myArray}" ireturn="iSize"/>
		<echo>ArrayGroesse von arrayElementCountJsZZZ: ${iSize}</echo><!-- Diese Methode darf nur 1 zurückgeben. -->
		<echo>myArray nachher (2): ${myArray}</echo><!-- hier muss 1x <#!!FGLEMPTY!!#> drin stehen. -->
		
		<echo>#################################</echo>
		
				<fl:let>
			myArraySize::=2; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Debug Ausgabe, wie das Array nun aussieht: -->
		<arrayDebugJsZZZ arrayinput="${myArray}" iLevel="1"/>
		
		<!-- Hier wird die scriptdef Methode arrayElementCountJsZZZ aufgerufen -->
		<arrayElementCountJsZZZ arrayinput="${myArray}" ireturn="iSize"/>
		<echo>ArrayGroesse von arrayElementCountJsZZZ: ${iSize}</echo><!-- Diese Methode darf nur 2 zurückgeben. -->
		<echo>myArray nachher (2): ${myArray}</echo><!-- hier muss 1x <#!!FGLEMPTY!!#> drin stehen. -->
		
		<echo>#################################</echo>
		
	</target>
	
	<target name="-myTestArrayLeftBackStringJsZZZ">
		<fl:let>sScript::='-myTestArrayLeftBackStringJsZZZ: '</fl:let>
		
		<!-- Teste einen String an die Werte eines Arrays anzuhaengen -->
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>myTestArrayLeftBackStringJsZZZ:
		Meine Loesung: Scriptdef arrayLeftBackStringJsZZZ</fl:logo>	


		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 3 'initialisieren' -->
		<fl:let>myArraySize::=3;</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<fl:let>myValue2Append::=".txt";</fl:let>
		
		<!-- Wert anhängen -->		
		<arrayPlusStringJsZZZ arrayinput="${myArray}" sinput="${myValue2Append}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>

		<!-- NUN ERST DAS ABZIEHEN DES WERTS TESTE -->
		<arrayLeftBackStringJsZZZ arrayinput="${myArray}" sinput=".txt" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
	</target>
	
	<target name="-myTestArrayPlusStringJsZZZ">
		<fl:let>sScript::='-myTestArrayPlusStringJsZZZ: '</fl:let>
		
		<!-- Teste einen String an die Werte eines Arrays anzuhaengen -->
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>myTestArrayPlusStringJsZZZ:
		Meine Loesung: Scriptdef arrayPlusStringJsZZZ</fl:logo>	


		<echo>###########################################################</echo>
		<!-- anderer Versuch: Array mit 3 'initialisieren' -->
		<fl:let>myArraySize::=3;</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<fl:let>myValue2Append::="_angehaengt";</fl:let>
		
		<!-- Wert anhängen -->		
		<arrayPlusStringJsZZZ arrayinput="${myArray}" sinput="${myValue2Append}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
	
		<!-- Ausgabe des neuen Arrays -->	
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>				
	</target>
  
  <target name="-myTestArrayStringImplodeJsZZZ">
		<fl:let>sScript::='-myTestArrayStringImplodeJsZZZ: '</fl:let>
		<fl:let>sTrace::=""</fl:let>
		<!-- Wende hier von antcontrib den try...catch mechanismus an. -->
		<trycatch property="myError" reference="myErrorObject">
		<try>
		<fl:logo>${sScript}Start
		Meine Loesung: Scriptdef arrayStringImplodeJsZZZ</fl:logo>
		<echo> </echo>
		<echo>#### Eingabewert ohne Backslash, Delimiter ohne Backslash ##############################</echo>
		<fl:let>myArraySize::=3;</fl:let>
		<echo>${sScript}ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>${sScript}myArray vorher: ${myArray}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
				
		<fl:let>sDelimiter::="x"</fl:let>
		<arrayCopyJsZZZ arrayinput="${myArray}" arrayreturn="myArrayNew" sflagcontrol="" />
		<arrayStringImplodeJsZZZ inputarraystring="${myArrayNew}" inputdelimiter="${sDelimiter}" inputindexlow="-1" inputindexhigh="-1" returnstring="myReturnString" returncontrol="myReturnControl" returncontrolstring="myReturnControlString"/>
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		<echo>${sScript}Ergebnisstring: ${myReturnString}</echo>

		<echo> </echo>
		<echo>#### Eingabewert ohne Backslash, Delimiter MIT Backslash ##############################</echo>
		<fl:let>myArraySize::=3;</fl:let>
		<echo>${sScript}ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray2"/>
		<echo>${sScript}myArray vorher: ${myArray2}</echo>
	
		<!-- Werte eingeben -->
		<arrayValueTestFillJsZZZ arrayinput="${myArray2}" ilbound="0" iubound="" arrayreturn="myArray2New" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArray2New}" arrayreturn="myArray2" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray2}" ilevel="1"/>
				
		<fl:let>sDelimiter2::="\\"</fl:let><!-- Backslash muss maskiert werden -->
		<arrayCopyJsZZZ arrayinput="${myArray2}" arrayreturn="myArray2New" sflagcontrol="" />
		<arrayStringImplodeJsZZZ inputarraystring="${myArray2New}" inputdelimiter="${sDelimiter2}" inputindexlow="-1" inputindexhigh="-1" returnstring="myReturnString2" returncontrol="myReturnControl" returncontrolstring="myReturnControlString"/>
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		<echo>${sScript}Ergebnisstring: ${myReturnString2}</echo>	

		</try>
		<catch>
			<echo>In &lt;catch&gt;.</echo>
			<echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo>
		</catch>

		<finally>
			<echo>In &lt;finally&gt;.</echo>
		</finally>
		</trycatch>				
	</target>

  <target name="-myTestArrayStringTrimJsZZZ">
		<fl:let>sScript::='-myTestArrayStringTrimJsZZZ: '</fl:let>
		<fl:let>sTrace::=""</fl:let>
		<!-- Wende hier von antcontrib den try...catch mechanismus an. -->
		<trycatch property="myError" reference="myErrorObject">
		<try>
		
		<fl:logo>${sScript}Start
		Meine Loesung: Scriptdef arrayStringTrimJsZZZ</fl:logo>
		<echo> </echo>
		<echo>#### Eingabewert mit abschliessendem Leerstring, Delimiter Backslash ==> Erzeugt leeres letzes Arrayelement ##############</echo>		
		<fl:let>sValue::='c:\test\directory\nocheins\ '</fl:let><!-- Der Backslash muss maskiert werden --><!-- Leerzeichen angehängt -->
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="\\"</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="myReturnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="myReturnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myReturnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>			
		<echo> </echo>
		<echo>${sScript}# Nun inputcontrolstring='trim' ##############</echo>
		<arrayStringTrimJsZZZ inputarraystring="${myArray}" inputcontrolstring="trim" returnarraystring="myReturnArray2" returnchanged="myReturnBoolean" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<echo>${sScript}wurde etwas veraendert=${myReturnBoolean}</echo>
		
		<arrayCopyJsZZZ arrayinput="${myReturnArray2}" arrayreturn="myArray2" sflagcontrol="" />		
		<arrayDebugJsZZZ arrayinput="${myArray2}" ilevel="1"/>		
		<echo> </echo>
		<echo>${sScript}# Nun inputcontrolstring='trimmed' ##############</echo>
		<arrayStringTrimJsZZZ inputarraystring="${myArray}" inputcontrolstring="trimmed" returnarraystring="myReturnArray2"  returnchanged="myReturnBoolean" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo>${sScript}wurde etwas veraendert=${myReturnBoolean}</echo>
		
		<arrayCopyJsZZZ arrayinput="${myReturnArray2}" arrayreturn="myArray2" sflagcontrol="" />		
		<arrayDebugJsZZZ arrayinput="${myArray2}" ilevel="1"/>
		<echo> </echo>			

		<echo> </echo>			
		<echo>#### Eingabewert mit abschliessendem trimmbaren String, Delimiter Backslash ==> Erzeugt trimmbares letzes Arrayelement ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins\\ xyz '</fl:let><!-- Der Backslash muss maskiert werden --><!-- Leerzeichen angehängt -->
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="\\"</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="myReturnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="myReturnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${myReturnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>			
		<echo> </echo>
		<echo>${sScript}# Nun inputcontrolstring='trim' ##############</echo>
		<arrayStringTrimJsZZZ inputarraystring="${myArray}" inputcontrolstring="trim" returnarraystring="myReturnArray2"  returnchanged="myReturnBoolean" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo>${sScript}wurde etwas veraendert=${myReturnBoolean}</echo>
		
		<arrayCopyJsZZZ arrayinput="${myReturnArray2}" arrayreturn="myArray2" sflagcontrol="" />		
		<arrayDebugJsZZZ arrayinput="${myArray2}" ilevel="1"/>
		<echo> </echo>
		<echo>${sScript}# Nun inputcontrolstring='trimmed' ##############</echo>
		<arrayStringTrimJsZZZ inputarraystring="${myArray}" inputcontrolstring="trimmed" returnarraystring="myReturnArray2"  returnchanged="myReturnBoolean"  returncontrol="myReturnControl2" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl2}" returncontrolstring="${myReturnControlString}"/>
		<echo>${sScript}wurde etwas veraendert=${myReturnBoolean}</echo>
		
		<arrayCopyJsZZZ arrayinput="${myReturnArray2}" arrayreturn="myArray2" sflagcontrol="" />		
		<arrayDebugJsZZZ arrayinput="${myArray2}" ilevel="1"/>
		<echo> </echo>

		</try>
		<catch>
			<echo>In &lt;catch&gt;.</echo>
			<echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo>
		</catch>

		<finally>
			<echo>In &lt;finally&gt;.</echo>
		</finally>
		</trycatch>		
	</target>

	<target name="-myTestIsArrayEmptyJsZZZ">
		<fl:let>sScript::='-myTestIsArrayEmptyJsZZZ: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef isArrayEmptyJsZZZ</fl:logo>	

		<echo>### 1. Testaufbau: Array blanko 'initialisieren' ########################################################</echo>
		<fl:let>
			myArraySize::=; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArrayNew"/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Prüfe das Array -->
		<isArrayEmptyJsZZZ arrayinput="${myArray}" returnboolean="myValue01" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<echo>${sScript}Pruefung nach ArrayInit: ${myValue01}</echo> 		
		<echo></echo>		
		
		<echo>###  2. Testaufbau: Array mit 3 'initialisieren'  ########################################################</echo>
		<fl:let>
			myArraySize::=3; 
		</fl:let>
		<echo>ArrayGroesse: ${myArraySize}</echo>
		<arrayInitJsZZZ isize="${myArraySize}" arrayreturn="myArray"/>
		<echo>myArray nachher: ${myArray}</echo>
		
		<!-- Prüfe das Array -->
		<isArrayEmptyJsZZZ arrayinput="${myArray}" returnboolean="myValue02" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<echo>${sScript}Pruefung nach ArrayInit mit 3: ${myValue02}</echo> 
		<echo></echo>		
		
		<echo>### 3. Testaufbau: Array und Werte eingeben ########################################################</echo>
		<arrayValueTestFillJsZZZ arrayinput="${myArray}" ilbound="0" iubound="" arrayreturn="myArrayNew" ireturn=""/>
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->
	
		<!-- Prüfe das Array -->
		<isArrayEmptyJsZZZ arrayinput="${myArray}" returnboolean="myValue03" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<echo>${sScript}Pruefung nach ArrayInit und Fuellen: ${myValue03}</echo> 
		<echo></echo>		
		
		<echo>###  4. Testaufbau: Wert 'mit BACKSLASH am Ende' an das Array anhängen ################</echo>
		<fl:let>
			mySingleValue::= "angehängte Endung beachten\\"; 
		</fl:let>
		<arrayAppendJsZZZ arrayinput="${myArray}" valueinput="${mySingleValue}" arrayreturn="myArrayNew"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<arrayCopyJsZZZ arrayinput="${myArrayNew}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->
		
		<!-- Prüfe das Array -->
		<isArrayEmptyJsZZZ arrayinput="${myArray}" returnboolean="myValue04" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>		
		<echo>${sScript}Pruefung nach ArrayInit und Fuellen (mit Backslash): ${myValue04}</echo> 
		<echo></echo>		
	</target>

	
		<!-- Beispiel für JAVA Arrays
		<scriptdef name="validateTimeZone" language="javascript">
    <attribute name="zone" />
    <![CDATA[
        importClass(java.util.TimeZone);
        importClass(java.util.Arrays);
        var tz = attributes.get("zone"); //get attribute defined for scriptdef
        println("    got attribute: " + tz);
        var result = Arrays.asList(TimeZone.getAvailableIDs()).contains(tz); //testing if timezone is known
        project.setProperty("zoneIsValid", result);
    ]]> 
</scriptdef> 
-->
		
 </project>