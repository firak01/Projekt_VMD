<?xml version="1.0" encoding="UTF-8" ?>  
<project name="tryoutAnt_FlakaListHandling"   default="compile" basedir=".."
	xmlns:fl="antlib:it.haefelinger.flaka" 
	xmlns:ac="antlib://net/sf/antcontrib"><!-- damit definiert man für antcontrib , bzw. FLAKA einen eigenen Namespace. Antcontrib wird hier per taskdef (siehe unten) hinzugefügt. -->
	
	 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
   	<!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedir in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<import file="../scriptdef/ZAnt_basic_zBasic_ExceptionZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_ArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_math_MathZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_test_HelperZZZ.xml"/>
	
	<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
	 	
<!-- ############## Hilfstargets ############################################################-->
	<!-- ######## Hilfstargets ###########################################--> 
<target name ="-arrayStringEscapeBackslashZZZ">
	<fl:let>sScript::='-arrayStringEscapeBackslashZZZ: '</fl:let>
	<fl:let>sTrace::=""</fl:let>
			
	<!-- Uebergabewerte entgegennehmen -->
	<!--<fl:let>myInputValue02::="${inputvalue02}"</fl:let>--><!-- So nimmt man Strings entgegen. Wichtig: In Hochkommata setzen. So wird ein call by value sichergestellt und die Referenzen gehen nicht verloren.-->
	<arrayCopyJsZZZ arrayinput="${inputArray}" arrayreturn="myInputArray" sflagcontrol="" />
		
	<!-- Das temporaere Array fuer die Rueckgabewerte initialisieren -->
	<arrayInitJsZZZ isize="0" arrayreturn="myArrayReturnTemp"/>   	
	
	<!-- Verarbeitung: In einer Schleife fuer jeden String StringEscapeBackslashZZZ aufrufen und  den Ergebniswert in das Rueckgabearray packen. -->
	<!-- Alternativer Aufbau der For Schleife: <ac:for param="i" end="1" begin="1"> 	-->
	<ac:for param="myStringTemp" list="${myInputArray}"><!-- Beachte das for nur für sequential funktioniert und darin mit @ auf die Param-Variable zugegriffen werden kann. -->
		<sequential>
			<echo>${sScript}myStringTemp=@{myStringTemp}</echo> 
			<!-- Merke: Folgender Code macht daraus wohl ein Array, also nix was direkt den Backslash ersetzt .... <fl:let>myStringTempEscaped ::= split('@{myStringTemp}','\\\\')</fl:let>--><!-- 4 Backslashe um den 1 Backslash zu escapen in der split - Funktion -->

			<!-- Nur einmal escapen reicht nicht, intern es muss x-mal escaped werden, da bei der Umwandlung zu String immer ein escapender Backslash verloren geht.-->
			<antcallback target="-stringEscapeBackslashZZZ" return="returnControl,returnTrace,returnString">
				<param name="stringInput" value="@{myStringTemp}" /><!--wichtig: In der aufgerufenen Methode den Wert per Hochkommata abholen. Dadurch wird der Wert 'byValue' uebergeben, aber es wird einmal die Backslashverdoppelung wieder entfernt. -->	
				<param name="intNumber" value="1" />					
			</antcallback>
							
			<!-- den unescapten String in das Rueckgabearray packen, dabei wird zwar wieder encoded, aber der Backslash ist doppelt! -->
			<echo>${sScript}myStringTempUnescaped=${returnString}</echo>
			<fl:let>myStringUnescaped::="${returnString}"</fl:let><!-- So nimmt man Strings entgegen. Wichtig: In Hochkommata setzen. So wird ein call by value sichergestellt und die Referenzen gehen nicht verloren.-->
			<echo>${sScript}myStringUnescaped=${myStringUnescaped}</echo>
			<arrayAppendJsZZZ arrayinput="${myArrayReturnTemp}" valueinput="${myStringUnescaped}" arrayreturn="myArrayValue" sflagcontrol="" />			
			<arrayCopyJsZZZ arrayinput="${myArrayValue}" arrayreturn="myArrayReturnTemp" sflagcontrol="" />			
		</sequential>				
	</ac:for>
	 		
	<!-- Rueckgabebwerte -->			
	<!--<ac:var name="returnBoolean" value="${myReturnBoolean}" />-->
	<arrayCopyJsZZZ arrayinput="${myArrayReturnTemp}" arrayreturn="returnArray" sflagcontrol="" />
	<fl:let>returnControl::=true</fl:let>
	<fl:let>returnTrace::="${sScript}Alles o.k. | ${sTrace}"</fl:let>
	
	<!-- <arrayCopyJsZZZ arrayinput="${myaError}" arrayreturn="returnaString" sflagcontrol="" /> --><!-- So gibt man einen Arraywertzurueck -->
</target>

<!-- ######## Hilfstargets ############################################################################--> 	
<target name="-stringEscapeBackslashZZZ">
	<fl:let>sScript::='-stringEscapeBackslashZZZ: '</fl:let>
	<fl:let>sTrace::=""</fl:let>
	
	<!-- Escape den Backslash. Dies in ein Hilfstarget packen, das propertyRegex mit einer Property statt Variablen arbeitet.
							   Properties aendern aber nicht ihren Wert innerhalb eines Targets, was unguenstig fuer Schleifen ist.		-->	
	<!-- Steuerungsflag: 'encoded' -->

<!-- Scheint ein Fehler in antcontrib zu sein. Vielleicht auch alternative Lösung durch FLAKA ....
	<project xmlns:fl="antlib:it.haefelinger.flaka">

  <property name="digitA" value="42"/>
  <property name="digitB" value="23"/>
  <property name="wordA"  value="abcd"/>
  <property name="wordB"  value="efgh"/>

  <!- compare of digits ->
  <fl:when test=" '${digitA}' > '${digitB}' ">
    <echo>${digitA} gt ${digitB}</echo>
  </fl:when>

  <!- example with string compare in switch ->
  <fl:switch value="${wordA}">
    <cmp gt="${wordB}">
      <echo>${wordA} gt ${wordB}</echo>
    </cmp>
    <cmp lt="${wordB}">
    <echo>${wordA} lt ${wordB}</echo>
    </cmp>
  </fl:switch>

</project>-->
	<fl:let>mysFlagControl::="${stringInputControl}"</fl:let>
	<fl:let>mysString::="${stringInput}"</fl:let>
	<fl:let>myiNumber::="${intNumber}"</fl:let><!-- wichtig: in Hochkommata setzen. Nur so wird der Wert gerettet, weil call by value-->
	<fl:let>returnControl::=false</fl:let>
						
	<!--<echo message="${sScript}myiNumber=${myiNumber}" />-->
	<ac:if>
		<ac:equals arg1="${myiNumber}" arg2="0" />
		<ac:then>
			<!-- mache nix -->
			<fl:let>mysString::="${stringInput}"</fl:let>			
		</ac:then>
		<ac:elseif>
			<ac:equals arg1="${myiNumber}" arg2="1" />
			<ac:then>
				<echo message="${sScript}0:'mysString'=${mysString}" />
			
				<!--ac:for erwartet immer ungleiche Parameterwerte. D.h. Schleife ueber ein Element geht nicht. Darum hier separat aufrufen. --> 
				<!-- Hier: 1-mal Das eigentliche Escapen aufrufen. Man beachte die voranstehenden doppelten Minuszeichen. -->
				<antcallback target="--stringEscapeBackslashZZZ" return="returnControl,returnTrace,returnString">					
						<param name="stringInput" value="${mysString}" /><!--wichtig: In der aufgerufenen Methode den Wert per Hochkommata abholen. Dadurch wird der Wert 'byValue' uebergeben, aber es wird einmal die Backslashverdoppelung wieder entfernt. -->												
						<param name="stringInputControl" value="${mysFlagControl}" />
				</antcallback>
				
				<!--<fl:let>mysStringNormed::='${returnString}'</fl:let>--><!--wichtig: In Hochkommata setzen. Dadurch wird der Wert 'byValue' uebergeben, aber: Es wird einmal die Backslashverdoppelung wieder entfernt. -->							
				<!--<echo>${sScript}Normierter Verzeichniseintrag: ${mysStringNormed}</echo>-->
				<fl:let>mysString::='${returnString}'</fl:let>
				
			</ac:then>
		</ac:elseif>
		<ac:else>
		    <!-- Merke: AntContib islessthan funktioniert nicht als condition in ac:if (weil Bug), darum meine eigene Methode nutzen -->
			<antcallback target="-isLessThanZZZ" return="returnBoolean,returnControl,returnTrace">
				<param name="inputvalue01" value="${myiNumber}"/>					
				<param name="inputvalue02" value="0"/>	
			</antcallback>				 
			<!--<echo>${sScript}returnBoolean=${returnBoolean}</echo>-->
			<!--<echo>${sScript}returnControl=${returnControl}</echo>-->
			<!--<echo>${sScript}returnTrace=${returnTrace}</echo>-->
			<fl:let>myLessThanZero::=${returnBoolean}</fl:let>
			<ac:if>
				<ac:equals arg1="${myLessThanZero}" arg2="true" />
				<ac:then>
					<fl:fail message="${sScript}Die Anzahl der Escape - Backslash kleiner 0. Unerwarteter Parameter"/><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird -->									
				</ac:then>
				<ac:else>
					<!-- 3. Reduziere die Anzahl um -1 -->	
					<!-- TODO IDEE: Dieses in einen Dateibehandlungs Scriptdef packen -->
					<!-- von der Anzahl der Werte -1 abziehen, um den Index zu bekommen -->
					<var name="op1" value="${myiNumber}"/>
					<var name="op2" value="1"/>
					<var name="op" value="-"/>
					<math result="myiNumberIndexed" operand1="${op1}" operation="${op}" operand2="${op2}" datatype="int"/>
					<!--<echo>${sScript}Errechneter ubound Wert: ${myiNumberIndexed}</echo>-->
					
					
					<ac:for param="icounter" end="${myiNumberIndexed}">			
						<sequential>
							<!--<echo>${sScript}icounter ist @{icounter}</echo>-->
							<echo message="${sScript}1:'mysString'=${mysString}" />
							
							<!-- Hier: x mal Das eigentliche Escapen aufrufen. Man beachte die voranstehenden doppelten Minuszeichen. -->
							<antcallback target="--stringEscapeBackslashZZZ" return="returnControl,returnTrace,returnString">					
									<param name="stringInput" value="${mysString}" /><!--wichtig: In der aufgerufenen Methode den Wert per Hochkommata abholen. Dadurch wird der Wert 'byValue' uebergeben, aber es wird einmal die Backslashverdoppelung wieder entfernt. -->												
							</antcallback>
							
							<!--<fl:let>mysStringNormed::='${returnString}'</fl:let>--><!--wichtig: In Hochkommata setzen. Dadurch wird der Wert 'byValue' uebergeben, aber: Es wird einmal die Backslashverdoppelung wieder entfernt. -->							
							<!--<echo>${sScript}Normierter Verzeichniseintrag: ${mysStringNormed}</echo>-->
							<fl:let>mysString::='${returnString}'</fl:let>
							
						</sequential>
					</ac:for>		
				</ac:else>		
			</ac:if>									
		</ac:else>
	</ac:if><!-- Gleichheitszeichen -->
	
	<!-- Rueckgabewerte -->
	<ac:var name="returnString" value="${mysString}" />
	<!--<echo message="${sScript}'returnString'=${returnString}" />-->
	<ac:var name="returnControl" value="true" />
	<ac:var name="returnTrace" value="${sScript} Alles ok.|${sTrace}" />
	<!-- <arrayCopyJsZZZ arrayinput="${myaError}" arrayreturn="returnaString" sflagcontrol="" /> --><!-- So gibt man einen Arraywertzurueck -->			
</target>

<target name="--stringEscapeBackslashZZZ">
	<fl:let>sScript::='--stringEscapeBackslashZZZ: '</fl:let>
	<fl:let>sTrace::=""</fl:let>
	
	<!-- Escape den Backslash. Dies in ein Hilfstarget gepackt, da propertyRegex mit einer Property statt Variablen arbeitet.
							   Properties aendern aber nicht ihren Wert innerhalb eines Targets, was unguenstig fuer Schleifen ist.		-->
    <!-- Steuerungsflag: 'encoded' -->
    <fl:let>mysFlagControl::="${stringInputControl}"</fl:let>							   
	<fl:let>mysString::="${stringInput}"</fl:let>
	<fl:let>returnControl::=false</fl:let>
	<fl:let>returnString::="${stringInput}"</fl:let>	

	<!-- Ggfs. ist der String durch JavaScript encoded worden, dies macht z.B. arrayAppend vom mir automatisch.
	hier also erst einmal unencoden -->	
	<stringUnencodeJsZZZ inputstring="${mysString}" returnstring="mysStringUnencoded" returncontrol="myReturnControl"  returnControlString="myReturnControlString" sflagcontrol="" />
	<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
	<echo message="${sScript}bcontrol | mysStringUnecoded = ${myReturnControl} | ${mysStringUnencoded}" />
	
	<!-- Das eigentliche Escapen des Backslashs -->	
	<!-- Aufruf des propertyregex Targets: Hier zum vervierfachen der Backslashe -->	
	<!-- Merke: It is important to note that when doing a "replace" operation, if the input string does not match the regular expression, then the property is not set. You can change this behavior by supplying the "defaultValue" attribute. This attribute should contain the value to set the property to in this case. -->
	            <!-- d.h. nutze 'defaultValue', sonst bleibt der Rueckgabewert leer, wenn durch die RegEx-Operation nichts gefunden wird. -->
	<propertyregex property="mytemp" input="${mysStringUnencoded}" regexp="\\" replace="\\\\\\\\\\\\\\\" global="true" defaultValue="${mysString}"/><!-- das funktioniert aber die Backslashe nur zu verdoppeln reicht nicht, hier: vervierfachen -->
	<!--<echo message="${sScript}mytemp = ${mytemp}" />-->
		
	<!-- Ggfs. je nachdem wie bcontrol aussieht (s. stringUnencodeJsZZZ) den String wieder in seine Encoded Form versetzten -->
	<!-- Das ueber einen sFlagControl Parameter steuerbar machen. -->
	<if>
		<and>
			<equals arg1="${mysFlagControl}" arg2="encoded" />
			<equals arg1="${bControl}" arg2="true" />
		</and>
		<then>
			<echo message="${sScript}Encoded wiederherstellen" />
			<stringEncodeJsZZZ inputstring="${mysString}" returnstring="mysStringEncoded"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<fl:let>mysString::="${mysStringEncoded}"</fl:let><!--wichtig: In Hochkommata setzen. Dadurch wird der Wert 'byValue' uebergeben-->
		</then>
		<else>
			<echo message="${sScript}Unencoded lassen" />
			
			<!-- wegen der vielen Zwischenschritte reicht auch das vervierfachen nicht.-->
	<!-- Aufruf des propertyregex Targets: Hier zum erneuten vervierfachen der Backslashe -->	
	<!-- Merke: It is important to note that when doing a "replace" operation, if the input string does not match the regular expression, then the property is not set. You can change this behavior by supplying the "defaultValue" attribute. This attribute should contain the value to set the property to in this case. 
	            d.h. nutze 'defaultValue', sonst bleibt der Rueckgabewert leer, wenn durch die RegEx-Operation nichts gefunden wird. -->
	<!--<propertyregex property="mytemp02" input="${mytemp}" regexp="\\" replace="\\\\\\\" global="true" />--><!-- das waere wieder verdoppeln -->
	<propertyregex property="mytemp02" input="${mytemp}" regexp="\\" replace="\\\\\\\\\\\\\\\" global="true" defaultValue="${mytemp}"/><!-- das funktioniert aber die Backslashe nur zu verdoppeln reicht nicht, hier: vervierfachen -->
	<!--<echo message="${sScript}mytemp02 = ${mytemp02}" />-->
	<fl:let>mysString::='${mytemp02}'</fl:let><!--wichtig: In Hochkommata setzen. Dadurch wird der Wert 'byValue' uebergeben, aber: Es wird einmal die Backslashverdoppelung wieder entfernt. -->							
	<!--<echo message="${sScript}'mysString'=${mysString}" />-->
	
			
			<!-- mache nix hinsichtlich codierung -->
		</else>
	</if>
		
	<!-- Rueckgabewerte -->
	<ac:var name="returnString" value="${mysString}" />
	<!--<echo message="${sScript}'returnString'=${returnString}" />-->
	<ac:var name="returnControl" value="true" />
	<ac:var name="returnTrace" value="${sScript}Alles ok.|${sTrace}" />
	<!-- <arrayCopyJsZZZ arrayinput="${myaError}" arrayreturn="returnaString" sflagcontrol="" /> --><!-- So gibt man einen Arraywert zurueck -->			
</target>


<!-- ################################################################################# -->
<!-- Die einzelnen Tests im depends hinzufügen -->
<!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
			 
<!-- TODO Test für isarrayEmptyJsZZZ -->			 
			 
<!-- <target name="compile" depends="-declaration,myTestArrayStringEscapeBackslash> -->
<target name="compile" depends="-declaration,-myTestArrayStringEscapeBackslash">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
  <target name="-declaration">
	  <!-- um EL referencen zusätzlich zu den normalen Ant Referencen anzustellen (außerhalb der Flaka Tasks), muss man die ant standard property 	helper engine austauschen.
	  dies passiert hier durch flaka´s install-property handler task -->
	  <fl:install-property-handler />	
  </target>
  
   <target name="-myTestArrayStringEscapeBackslash">
	<fl:let>sScript::='-myTestArraytStringEscapeBackslash: '</fl:let>
	<fl:let>sTrace::=""</fl:let>
	<echo>${sScript}Start</echo>
	
	<echo>##################################</echo>
	<!-- Das Testarray initialisieren -->
	<arrayInitJsZZZ isize="0" arrayreturn="myArrayTemp"/>
	<fl:let>sString2escape::='c:\test\directory\nocheins'</fl:let>
	<echo>${sScript}1. sString2escape=${sString2escape}</echo>
	<arrayAppendJsZZZ arrayinput="${myArrayTemp}" valueinput="${sString2escape}" arrayreturn="myArrayValue" sflagcontrol="" />
	
	<arrayCopyJsZZZ arrayinput="${myArrayValue}" arrayreturn="myArrayTemp" sflagcontrol="" />
	<fl:let>sString2escape::='c:\test\directory\zweites'</fl:let>
	<echo>${sScript}2. sString2escape=${sString2escape}</echo>	
	<arrayAppendJsZZZ arrayinput="${myArrayTemp}" valueinput="${sString2escape}" arrayreturn="myArrayValue" sflagcontrol="" />
	
	<arrayCopyJsZZZ arrayinput="${myArrayValue}" arrayreturn="myArrayTemp" sflagcontrol="" />
	<fl:let>sString2escape::='c:\test\directory\drittesBeachteEndezeichen\\'</fl:let><!-- Der abschliessende Backslasch muss schon escaped werden, wg. der Hochkommata.-->
	<echo>${sScript}3. sString2escape=${sString2escape}</echo>	
	<arrayAppendJsZZZ arrayinput="${myArrayTemp}" valueinput="${sString2escape}" arrayreturn="myArrayValue" sflagcontrol="" />
	
	<echo>#### EINGABEWERTE - ENCODED im Array ####################</echo>
	<arrayDebugJsZZZ arrayinput="${myArrayValue}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->	
	
	<echo>#### VERARBEITUNG ####################</echo>
	<!-- Hier wird das Hilfstarget aufgerufen -->
	<antcallback target="-arrayStringEscapeBackslashZZZ" return="returnControl,returnTrace,returnArray">					
		<param name="inputArray" value="${myArrayValue}" />
		<!--wichtig fuer Strings: In der aufgerufenen Methode den Wert per Hochkommata abholen. Dadurch wird der Wert 'byValue' uebergeben, aber es wird einmal die Backslashverdoppelung wieder entfernt. -->	
	</antcallback>	
	
	
	<echo> </echo>
	<echo>#### ERGEBNISWERTE - ENCODED im Array (2mal %5C hintereinander) ####################</echo>
	<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArrayValue" sflagcontrol="" />
	<arrayDebugJsZZZ arrayinput="${myArrayValue}" ilevel="1"/><!-- Ausgabe des neuen Arrays -->	
	<echo> </echo>
	<echo>##################################</echo>
	
</target> 
		<!-- Beispiel für JAVA Arrays
		<scriptdef name="validateTimeZone" language="javascript">
    <attribute name="zone" />
    <![CDATA[
        importClass(java.util.TimeZone);
        importClass(java.util.Arrays);
        var tz = attributes.get("zone"); //get attribute defined for scriptdef
        println("    got attribute: " + tz);
        var result = Arrays.asList(TimeZone.getAvailableIDs()).contains(tz); //testing if timezone is known
        project.setProperty("zoneIsValid", result);
    ]]> 
</scriptdef> 
-->

	

		
 </project>