<?xml version="1.0" encoding="UTF-8" ?>  
<project name="FGLVmdGitPrepareHost" default="compile" basedir=".."
	xmlns:ac="antlib://net/sf/antcontrib"
	xmlns:fl="antlib:it.haefelinger.flaka">
	
	 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
 	<!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedr in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<import file="../scriptdef/ZAnt_basic_zBasic_ExceptionZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatypeZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_ArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_math_MathZZZ.xml"/>
	
   <!-- ### Einbinden von flaka ### -->
   <!--xmlns:fl="antlib:it.haefelinger.flaka"> --><!-- damit definiert man fuer FLAKA einen eigenen Namespace -->

   <!-- ### Einbinden von Ant-Contrib ### -->
   <!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen moechte, 
            z.B. <if-contrib> verwenden statt <if> UND das Einbinden des Namespace von AntContrib nicht macht.### -->
	<!--    <taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	 <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" />
	 <taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" />
	 <taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" /> -->
	 
	 
	 <!-- man kann Ant-Contrib auch mit einem Namespace definieren, trotzdem kann man die ant-contrib Tasks auch ohne Namespace ansprechen.-->
	 <!-- xmlns:ac="antlib://net/sf/antcontrib">

    <taskdef resource="net/sf/antcontrib/antlib.xml"
         uri="antlib://net/sf/antcontrib">
        <classpath>
            <fileset dir="${basedir}/antlib/antcontrib"/>
        </classpath>
    </taskdef> -->
	 
	 
 
	  <!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so waehlen, wie sie in der ant-contrib Doku benannt sind ### -->
	  <!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	 <taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
			   	 
  <!-- ######### Set global properties for this build ####################################################-->
  <!-- Example for using an environment variable, which is defined e.g. in windows: 
       <property name="build" value="${BUILDTARGET}"/> -->
  <!-- Beispiele fuer relative Pfade
  <property name="dest" value="target"/>
  <property name="src" value="src"/>
  -->
  
<target name="-declaration"><!-- damit dies nicht z.B. beim Aufruf jedes ant-callback erneut gemacht wird, die Property Dekalarationen in ein eigenes target packen. Aber: Dafuer sorgen dass die Deklaration vor allen anderen Targets ausgefuehrt wird. -->
    <!-- An dieser Stelle Argumente entgegennehmen, entweder aus der Batch oder unter Eclipse aus der "external Configuration" des AntScripts  -->
  	<!-- Merke: You can define an argument with the property file name to the build in the 'Arguments' section of the Run > External Tools > External Tools Configuration for your Ant Build. Something like:
  	-Dproperties=Buildfile_test.properties

  	You use this in your build.xml like this:
  	<property file="${properties}"/>
  	-->
  	
	 <!-- um EL referencen zusatzlich zu den normalen Ant Referencen anzustellen (ausserhalb der Flaka Tasks), muss man die ant standard property 	helper engine austauschen.
	       dies passiert hier durch flaksss install-property handler task -->
	<fl:install-property-handler />  	
  	<property environment="env" /> <!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->
  	
  	<!-- TODO GOON: Hier eine Fallunterscheidung machen, ob durch Eclipse oder durch Batch gestartet wurde !!! -->
  	<echo>VMD Properties Datei= ${env.VMD}</echo>
	<echo>TRYOUT= ${env.TRYOUT_ANT}</echo>
  	<echo>ECLIPSE ARGUMENTS= ${vmd}</echo>
</target>
  
  <!-- ################################################################################# -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!-- <target name="compile" depends="-declaration, -init,-myTestAntcontribIf,-myTestFlakaChoose"> -->
 <target name="compile" depends="-declaration, -init,-myTestFlakaChoose">

	<!-- WIRD NICHT BENOETIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
 </target>
 
<target name="-init">
    <!-- Create the time stamp -->
	<echo>Receiving timestamp:</echo>
    <!--<tstamp/>-->
	<tstamp>
	<format property="current.time" pattern="yyyyMMdd_HHmmss" locale="en,GB"/>
	<!--<format property="backup_archive.name" pattern="'EinArchiv'yyyyMMdd_HHmmss'.zip'" locale="en,GB"/>-->
	<format property="backup_RepositoryArchive.name" pattern="'${dest.dirRepositoryVmdArchive}'yyyyMMdd_HHmmss'.zip'" locale="en,GB"/>
	<format property="backup_RepositoryMisc.name" pattern="'${dest.dirRepositoryVmdMisc}'yyyyMMdd_HHmmss'.zip'" locale="en,GB"/>
	</tstamp>
	<echo>Current Timestamp: ${current.time}</echo>
	<echo>Backup-Filenames: ${backup_RepositoryArchive.name}, ${backup_RepositoryMisc.name}</echo>
</target>
  
 <!-- ######################################################### -->  
<target name="-myTestAntcontribIf">
<fl:logo>
		myTestAntcontribIf
  </fl:logo>	
	<fl:let>mytest01 ::= '0'</fl:let>
	<fl:let>mytest02 ::= '1'</fl:let>
	<fl:let>mytest02 ::= '0'</fl:let>
	
	<!-- für if oder elseif gilt: 
	      and / or / not werden wie im condition task gemacht.
		  mehrere werden unter einem Tag zusammengefasst. mehrere <or> Tags  darf es nicht geben. Z.B.	
	<if>
	<or>
		<equals arg1="${var}" arg2="one"/>
		<equals arg1="${var}" arg2="two"/>
		<equals arg1="${var}" arg2="three"/>
		<equals arg1="${var}" arg2="four"/>
	</or>
   <then>
   -->
	<!-- es gibt zusätzlich zu <equals> noch weitere conditions in antcontrib, z.B.:   <isgreaterthan arg1="100" arg2="10"/> -->
	<!-- aber: ist greaterthan funktioniert nicht... -->
	<if>
		<equals arg1="${mytest01}" arg2="0" />
		<then>
			<echo>mytest01 ist 'null' </echo>
		</then>
		<elseif><!-- dann ist eine nested condition Pflicht -->
			<equals arg1="${mytest01}" arg2="-1" />
		<then>
			<echo>mytest01 ist '-1'. Darf nicht sein. </echo>
		</then>			
		</elseif>
		<else>						
			<echo>mytest01 ist ungleich 'null' </echo>
			
			<!-- AntContrib if duerfen verschachtelt sein  -->						
			<if>
				<equals arg1="${mytest02}" arg2="0" />
				<then>
					<echo>mytest02 ist 'null' </echo>
				</then>
				<else>
					<echo>mytest02 ist ungleich 'null' </echo>
					
					<if>
						<equals arg1="${mytest03}" arg2="0" />
						<then>
							<echo>mytest03 ist 'null' </echo>
						</then>
						<else>
							<echo>mytest03 ist ungleich 'null' </echo>
						</else>						
					</if>
				</else>
			</if>	
		</else>
	</if>		
 </target> 
  
<!-- ######################################################### -->  
<target name="-myTestFlakaChoose">
	<fl:logo>
		myTestFlakaChoose
  </fl:logo>
  <fl:install-property-handler />
	
	<!-- 1. Einfaches 'when' testen und die true(...) Funktion ausprobieren mit einem echten boolean - Wert. -->
	<fl:let>mytestBool ::= 'true'</fl:let>
	<isBooleanZZZ valueinput="${mytestBool}" valuereturn="myBooleanValue" isboolean="myValueIsBoolean" /><!-- anwenden der oben definierten scriptdef funktion -->
	<echo>es gilt: myBooleanValue = ${myBooleanValue} | myValueIsBoolean = ${myValueIsBoolean} </echo>
	<fl:when test="'${myValueIsBoolean}'==true">
			<echo>When:  Ein boolean Wert wurde gefunden.</echo>
			
			<!-- die Verschachtelung innerhalb der When's testen -->
			<fl:let>mytestBool ::= 'true'</fl:let>
			<isBooleanZZZ valueinput="${mytestBool}" valuereturn="myBooleanValue02" isboolean="myValueIsBoolean02" /><!-- anwenden der oben definierten scriptdef funktion -->
 			<fl:when test="'${myValueIsBoolean02}')==true">
				<echo>02 When:  Ein boolean 'true' Wert wurde gefunden.</echo>
			</fl:when>
			<fl:when test="'${myValueIsBoolean02}'!=true">
				<echo>02 When:  Ein boolean 'false' Wert oder 'undefiniert' wurde gefunden.</echo>
			</fl:when> 
			
	</fl:when>
	<fl:when test="'${myValueIsBoolean}'!=true">
			<echo>When:  KEIN boolean Wert oder undefiniert gefunden.</echo>
	</fl:when>
	
	
	
	<!-- 2. Verschachtelung von 'choose' testen. -->
	<fl:let>mytest01 ::= '0'</fl:let>
	<fl:let>mytest02 ::= '1'</fl:let>
	<fl:let>mytest02 ::= '0'</fl:let>	
 	<fl:choose>
		<fl:when test=" '${mytest01}' == '0' ">
			<echo>mytest01 ist 'null' </echo>	
			
			<!-- TODO: Verschachtelungsebenen einfügen -->
			
		</fl:when>
		<otherwise>		<!-- MERKE: otherwise gehört nicht zu flaka! -->
			<echo>mytest01 ist ungleich'null' </echo>				
			
			<!-- TODO: Verschachtelungsebenen einfügen -->
		</otherwise>
	</fl:choose>

</target>

</project>