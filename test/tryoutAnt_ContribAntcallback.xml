<project name="tryoutAnt_ContribAntcallback"  default="compile" basedir=".."
		xmlns:ac="antlib://net/sf/antcontrib"><!-- Damit definiert man für AntContrib einen eigenen Namespace -->

 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
   	<!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedr in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<!--<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_arrayZZZ.xml"/>-->
		
<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
	
	
<!-- ######### AntContrib: Callback Targets, quasi als ausgelagerte Unterfunktionen ################################-->
<!--           Merke: Es gibt auch im Standard eine AntCall und AntCallBack Task -->

<!-- ############################################################################### -->
<!-- Beweis, das Property Werte normaleweise nicht veraenderbar sind. -->
<!-- TODO: Mache den gleichen Beweis, mit veränderbaren PRoeprty Wertend
     Mache vor dem Aufruf des antcallback ein unset der variablen. Dann funktioniert es. Siehe tryoutAnt_ConditionHandlingWith_Flaka_Contrib.xml -->
<target name="-setVarCallback"><!-- das target dient nur als callback und soll so nicht aufgerufen werden -->
   <!-- Merke: Property Werte sind nicht veränderbar, egal wie oft man den Callback aufruft <property name="retValue" value="${lineFromFile}xxxxxx"/>
				Darum: Mach folgendes in dem aufrufenden Target, dann klappts <var name="retValue" unset="true"/> -->   
   <var name="retValue" value="${lineFromFile} das war's" />     
   
   <property name="out.file" value="${in.file}"/><!-- DIESE PROPERTY IST OHNE UNSET NICHT VERAENDERBAR -->
   
   <math result="result" operand1="${retCounter}" operation="+" operand2="1" datatype="int"/>
   <var name="retCounter" value="${result}" />
  <!--  <var name="out.file" value="${MyOut.file}" /> -->
</target>

  
  
  <!-- ########################### -->
  <target name="-declaration"><!-- damit dies ncht z.B. beim Aufruf jedes ant-callback erneut gemacht wird, die Property Dekalarationen in ein eigenes target packen. Aber: Dafür sorgen dass die Deklaration vor allen anderen Targets ausgeführt wird. -->
	<echo>##############################</echo>
	<echo>In diesem Tryout werden folgende Punkte ausprobiert, die teilweise nur mit ant-contrib lösbar sind:</echo>
	<echo>1) Eine Datei einlesen und Zeileweise parsen</echo>
	<echo>2) In einer Schleife ein target aufrufen, als antcallback und somit Werte dahin und daraus zu übernehmen</echo>
	<echo>   In einer Schleife ein target aufrufen, als antcallback und somit Werte dahin und daraus zu übernehmen</echo>
	<echo>3) Anwendung des math Tasks</echo>
	<!-- Ausprobieren von Ant-Contrib zum Datei parsen -->
	<property name="userdir_sub"  value="testused" />
	  
	<!-- <var name="retCounter" value="0" datatype="int" /> var unterstützt kein datatype Attribut -->
	<var name="retCounter" value="0" />
  </target>
  
<!-- ################################################################################# -->
<!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <target name="compile" depends="-declaration, -file_reader_total, -file_reader_correct, -file_reader_wrong">
    <echo>Im default - Target..., das von allen anderen Targets abhängt und daher zuletzt ausgeführt wird. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
 <target name="-file_reader_total">
			<!-- 2a. Lies den Inhalt der Datei generell ein. Aber: innerhalb des when test auf Dateipfad funktioniert das nicht, da darin der Pfad an den anderen Pfad angehängt wird.-->				
			<loadfile property="myfile" srcFile ="${userdir_sub}/file_antcallbackBeispiel.txt" />
			
  			<!-- Gib den Inhalt der Datei als Ganzes aus -->
			<echo>-----------------------------------------------------------------------------------</echo>
			<echo>Dateiinhalt als Ganzes:</echo>
			<echo>${myfile}</echo>
 </target> 
 
<target name="-file_reader_wrong">
	<echo>#########################################################################################</echo>
	<echo>Im file_reader - Target... </echo>
	<echo>Parsing file line by line: ${userdir_sub}/file_antcallbackBeispiel.txt</echo>			
			<!-- Gib den Inhalt der Datei zeilenweise aus -->
			<echo>1. Lauf ------------------------------------------------------</echo>
			<echo>Dateiinhalt Zeile für Zeile mit einem Returnwert:</echo>		

			<!-- for, var und if kommen aus der ant-contrib Bibliothek, Merke: Man kann aus einer Schleife keinen Wert zurückliefern, normalerweise. -->
			<for param="line">
				<tokens><!-- muss in der for-Schleife stehen, damit es dort eine list, path, sequence gibt, durch die iteriert werden kann. Wahrscheinlich wg. sichtbarkeit-->
					<file file="${userdir_sub}/file_antcallbackBeispiel.txt" />
				</tokens>
				<sequential>
					<!-- lass hier aus Testzwecken das unset weg --><!-- var name="out.file" unset="true"/> --><!-- Merke: In einem Callback sind ohne das unset die Werte nicht veränderbar-->
					 <ac:antcallback target="-setVarCallback" return="retValue, retCounter, out.file">
						<ac:param name="lineFromFile" value="@{line}"/>
						<ac:param name="in.file" value="TestWrong_1"/>
					</ac:antcallback>
					<echo>Ergebnis: ${out.file} - ${retCounter}. Wert: ${retValue}</echo>
				</sequential>
			</for>
			<echo>Ende von: ${out.file}.</echo>
			
			
			<!-- Gib den Inhalt der Datei zeilenweise aus -->
			<echo>2. Lauf ------------------------------------------------------</echo>
			<echo>Dateiinhalt Zeile für Zeile mit einem Returnwert:</echo>		

			<!-- for, var und if kommen aus der ant-contrib Bibliothek, Merke: Man kann aus einer Schleife keinen Wert zurückliefern, normalerweise. -->
			<for param="line">
				<tokens><!-- muss in der for-Schleife stehen, damit es dort eine list, path, sequence gibt, durch die iteriert werden kann. Wahrscheinlich wg. sichtbarkeit-->
					<file file="${userdir_sub}/file_antcallbackBeispiel.txt" />
				</tokens>
				<sequential>
					<!-- lass hier aus Testzwecken das unset weg --><!-- var name="out.file" unset="true"/> --><!-- Merke: In einem Callback sind ohne das unset die Werte nicht veränderbar-->
					 <ac:antcallback target="-setVarCallback" return="retValue, retCounter, out.file">
						<ac:param name="lineFromFile" value="@{line}"/>
						<ac:param name="in.file" value="TestWrong_2"/>
					</ac:antcallback>
					<echo>Ergebnis: ${out.file} - ${retCounter}. Wert: ${retValue}</echo>
				</sequential>
			</for>
			<echo>Ende von: ${out.file}.</echo>

</target>  
<target name="-file_reader_correct">
	<echo>#########################################################################################</echo>
	<echo>Im file_reader - Target... </echo>
	<echo>Parsing file line by line: ${userdir_sub}/file_antcallbackBeispiel.txt</echo>
				
			<!-- Gib den Inhalt der Datei zeilenweise aus -->
			<echo>1. Lauf -----------------------------------------------------------------------------</echo>
			<echo>Dateiinhalt Zeile für Zeile mit einem Returnwert:</echo>		

			<!-- for, var und if kommen aus der ant-contrib Bibliothek, Merke: Man kann aus einer Schleife keinen Wert zurückliefern, normalerweise. -->
			<for param="line">
				<tokens><!-- muss in der for-Schleife stehen, damit es dort eine list, path, sequence gibt, durch die iteriert werden kann. Wahrscheinlich wg. sichtbarkeit-->
					<file file="${userdir_sub}/file_antcallbackBeispiel.txt" />
				</tokens>
				<sequential>					 
					 <var name="out.file" unset="true"/><!-- Merke: In einem Callback sind ohne das unset die Werte nicht veränderbar--><!-- mache HIER KORREKTERWEISE DAS UNSET -->					 					 
					 <ac:antcallback target="-setVarCallback" return="retValue, retCounter, out.file">
						<ac:param name="lineFromFile" value="@{line}"/>
						<ac:param name="in.file" value="TestKorrekt_1"/>
					</ac:antcallback>
					<echo>Ergebnis: ${out.file} - ${retCounter}. Wert: ${retValue}</echo>
				</sequential>
			</for>
			<echo>Ende von: ${out.file}.</echo>

			
			<!-- Gib den Inhalt der Datei zeilenweise aus -->
			<echo>2. Lauf -----------------------------------------------------------------------------</echo>
			<echo>Dateiinhalt Zeile für Zeile mit einem Returnwert:</echo>		

			<!-- for, var und if kommen aus der ant-contrib Bibliothek, Merke: Man kann aus einer Schleife keinen Wert zurückliefern, normalerweise. -->
			<for param="line">
				<tokens><!-- muss in der for-Schleife stehen, damit es dort eine list, path, sequence gibt, durch die iteriert werden kann. Wahrscheinlich wg. sichtbarkeit-->
					<file file="${userdir_sub}/file_antcallbackBeispiel.txt" />
				</tokens>
				<sequential>					 
					 <var name="out.file" unset="true"/><!-- Merke: In einem Callback sind ohne das unset die Werte nicht veränderbar--><!-- mache HIER KORREKTERWEISE DAS UNSET -->					 					 
					 <ac:antcallback target="-setVarCallback" return="retValue, retCounter, out.file">
						<ac:param name="lineFromFile" value="@{line}"/>
						<ac:param name="in.file" value="TestKorrekt_2"/>
					</ac:antcallback>
					<echo>Ergebnis: ${out.file} - ${retCounter}. Wert: ${retValue}</echo>
				</sequential>
			</for>
			<echo>Ende von: ${out.file}.</echo>
</target> 
 </project>