<project name="tryoutAnt_EnvironmentVariable"  xmlns:fl="antlib:it.haefelinger.flaka">
<!-- damit definiert man für FLAKA einen eigenen Namespace -->
 
  <fl:logo>
		<!-- Kleines Start Logo -->
		<!-- a) Der Name der Ant Datei -->
   Starte: #{property['ant.file'].tofile.name}
   
		<!-- b) Frage FLAKAs EL Reference ab
             		und hole ein zur Verfügung stehendes Objekt der Klasse org.apache.ant.Project
					hole das basedir als Fileobjekt 
					und aus dem Fileobjekt schliesslich den Namen als String -->
		            
   Neue Zeile #{project.basedir.name}
   <!-- weitere Properties des project - objekts sind listen: targets, tasks, taskdefs, macrodefs -->
  </fl:logo>
  
  <!-- ########################### -->
  <!-- Ausprobieren von flaka´s EL Syntax -->
  <property name="userdir_sub"  value="testused" />
  <echo>
        Per se ist Flaka´s EL Syntax nicht aktiv:
		a) c:\1fgl\repository\Projekt_VMD\${userdir_sub}
		b) c:\1fgl\repository\Projekt_VMD\#{userdir_sub}
		
		Ausser in den Flaka Tasks. 
		Hier ist immer EL aktiv, demonstriert hier in einem WHEN Task (Merke: Task muss ausserhalb von echo - Tag stehen!)
	</echo>
	 <fl:when test=" file('c:\1fgl\repository\Projekt_VMD#{ format('\\%s', userdir_sub) }').isdir" >
		<echo>
		Verzeichnis geprueft mit EL. 
		Ein kleiner Vorgeschmack auf das Escapen von EL Ausdruecken und wie man es umgeht.
		</echo>
	</fl:when>
	
	
	
	 <!-- um EL referencen zusätzlich zu den normalen Ant Referencen anzustellen (außerhalb der Flaka Tasks), muss man die ant standard property 	helper engine austauschen.
	       dies passiert hier durch flaka´s install-property handler task -->
	 <fl:install-property-handler />
	<echo>
	##############################################
	# Man kann auch EL Ausdruecke als Strings behandeln. 
	#a) mit einem \ als Escape Zeichen vorweg
	#b) als String in einen anderen EL Ausdruck
	
	\#{3*4} = #{3*4}
	#{'#{3*4}'} = #{3*4}
	
	</echo>
	
	<echo>
	###############################################
	# Praktische Anwendung des Escapens von EL Ausdrücken.
	# a) normale ant property definiert und ausgegeben
	# b) flaka´s EL Syntax. Aber noch kein EL Objekt vorhanden
    # c) Wie man trotz backslash einen EL Ausdruck machen kann.
	
	zu a) c:\1fgl\repository\Projekt_VMD\${userdir_sub}
	zu b) c:\1fgl\repository\Projekt_VMD\\#{userdir_sub}
	zu c) c:\1fgl\repository\Projekt_VMD#{ format('\\%s', userdir_sub) } 
	
	Hinweis: Bei EL Ausdrücken ist anders als in Ant Properties der Whitespace egal.
	
	</echo>
	<!-- nun wird mit der EL Syntax #{userdir_sub} auf einen Eintrag der EL-Tabelle zugegriffen -->
	
	<!-- verwende antcontrib und escape mit 7 backslashe (wenn ein backslash am Ende steht) oder ansonsten 8 Backslashe -->
	http://mail-archives.apache.org/mod_mbox/ant-dev/200309.mbox/%3C200309051022.57848.peter.reilly@corvil.com%3E -->
	<!--<propertyregex property="mytemp" input="${mysFiledir}" regexp="\\" replace="\\\\\\\" global="true" />--><!-- das funktioniert.  Merke: Property ist nicht veränderbar, darum für jeden Aufruf eine extra Variable verwenden. -->
	
	
	
	<!-- Grenzen von Flaka´s EL, Seite 9 der Flaka 1.2 PDF Doku  :
	       a) nur 1x den task installieren
		   b) EL Ausdrücke sind nicht verschachtelbar.
		   c) Standard Property Ausdrücke werden vor den EL Ausdrücken errechnet, so dass ${project.#{'basedir'}} nicht geht. -->
	<!-- Es geht aber: -->
	<property name="the_basedir_property" value="basedir"/>
	<echo>
	##############################################
	Uebergib dynamisch den Namen einer Property fuer ein Objekt:
	#{project.${the_basedir_property}}
	</echo>
	
	<!-- ################################# -->
	<!-- hole eine echte umgebungsvariable und die in der Batch Datei gesetzte umgebungsvariable-->
	<property environment="env" /> <!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->
	<echo>
	##############################################
	# a) 
	# b) Umgebungsvariable (Merke unter cmd.exe kann man sich mit set alle möglichen Umgebungsvariablen anzeigen lassen.)
	# c) Von mir in Batch Datei gesetzte Umgebungsvariable
	
	a) user.home= ${user.home}
	b) env.COMPUTERNAME= ${env.COMPUTERNAME}
	c) env.TRYOUT_ANT=${env.TRYOUT_ANT}
	</echo>
	
	
	<!--###########################################-->
	<!-- TODO GOON FLAKA DOKUMENTation Seite 9ff -->
	
	<!--###########################################-->
	 <echo>######################################################</echo>
	 <echo>Normalerweise kann in ANT keine  Property verändert werden. Benutze dazu Flaka LET</echo>
	  <!-- um EL referencen zusätzlich zu den normalen Ant Referencen anzustellen (außerhalb der Flaka Tasks), muss man die ant standard property 	helper engine austauschen.
	       dies passiert hier durch flaka´s install-property handler task -->
	 <fl:install-property-handler /><!-- auch wenn das oben vielleicht schon mal gemacht worden ist -->
	<property name="fgl.test.variable" value="Ich bin ein Test" />
    <property name="fgl.test.variablePlus" value = "... und der hat geklappt."/>
	
    <!--das würde also nicht verändert, wenn fgl.test.variable vorher schon definiert ist <property name="fgl.test.variable" value="${fgl.test.variable} ${fgl.test.variablePlus}" />  -->
	<fl:let>fgl.test.variable ::= '${fgl.test.variable} ${fgl.test.variablePlus}'</fl:let> <!-- beachte den doppelten Doppelpunkt -->
	<echo>Wert von fgl.test.variable=${fgl.test.variable}</echo>
  
	
	
	<echo>
	###################################################
	# Normale Ant Funktionalität: Gib werte einer properties Datei aus, aus dem Unterverzeichnis ${userdir_sub}
	</echo>
	<loadproperties>
		<file file="c:\1fgl\repository\Projekt_VMD\${userdir_sub}\mapBeispiel.properties"/>
	</loadproperties> 
	<echo>Wert von test02=${test02}</echo>

	
	<!-- ########### -->
  <property file="${user.home}/${name}.${env.HOSTNAME}.build.properties" />
  

  
 </project>