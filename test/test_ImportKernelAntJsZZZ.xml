<?xml version="1.0" encoding="UTF-8" ?>  
<project name="test_ReflectionHandlingJsZZZ"   default="compile" basedir=".."
	xmlns:fl="antlib:it.haefelinger.flaka" 
	xmlns:ac="antlib://net/sf/antcontrib"><!-- damit definiert man für antcontrib , bzw. FLAKA einen eigenen Namespace. Antcontrib wird hier per taskdef (siehe unten) hinzugefügt. -->

	<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
<!-- ######## Scriptdefs ############################################################################--> 
<!-- ########################### -->
 <!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in den eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten. -->
 	

  <!-- ############################################################-->
	<scriptdef name="tryout_importKernelAntJs" language="javascript">		 
		 <attribute name="returnstring" />
		 <attribute name="returncontrol" />
		 <attribute name="returncontrolstring" />
		<!-- Hiermit testet man das Reflection Handling.
             Es wird ein Error Objekt erzeugt und daraus der Name der aktuellen Methode geholt.
			 Dies ist z.B. wichtig um genauere Log-Ausgaben zu erzeugen und den Code generisch zu halten -->
				
		<![CDATA[		
		    //attributes.get("inputParameter_denEsHierNichtGibt");
			
			//There is no "pass by reference" available in JavaScript. You can pass an object (which is to say, you can pass-by-value a reference to an object) and then have a function modify the object contents:
			var sReturn="";
			var bReturn=false; //Wird hier nicht zurueckgegeben
			var bReturnControl=false;
			var sReturnControl="Fehler";
				
			//Die benoetigten Kernel-Funktionen laden
			var objKernelLibs = new Array();
			var objControlCaller=new Object();
			var bReturn = enableKernelAntJs(objKernelLibs, objControlCaller);
			if(!objControlCaller.bReturnControl){								
				bReturn=false;
				sReturn="";
			}else{				
				sReturn=tryout_importKernelAntJs(objKernelLibs, objControlCaller);
				if(!objControlCaller.bReturnControl){									
					bReturn=false;
					sReturn="";
				}else{					
					bReturn=true;
				}
			}	
			bReturnControl=objControlCaller.bReturnControl;
			sReturnControl=objControlCaller.sReturnControl;
			project.setProperty(attributes.get("returnstring"),sReturn);
			project.setProperty(attributes.get("returncontrol"),bReturnControl);
			project.setProperty(attributes.get("returncontrolstring"),sReturnControl);
						
			function enableKernelAntJs(objKernelLibs, objControl){
				var sScript = "enableKernelAntJs: ";
				
			    //Erstelle eine Array der grundlegenden JavaScript-Kernel Funktionen.
				//und lies dieses Array ein.
				var bReturn=false; 
				var bReturnControl=false;
				var sReturnControl="Fehler";						
				try{					
					objKernelLibs[0] = new Object();
					objKernelLibs[0]["ALIAS"] = "ReflectCode";
					objKernelLibs[0]["DIRECTORY"] = "jsscriptdef";
					objKernelLibs[0]["FILE"] = "ZAnt.basic.zBasic.ReflectCodeZZZ.js";

					objKernelLibs[1] = new Object();
					objKernelLibs[1]["ALIAS"] = "HandleError";
					objKernelLibs[1]["DIRECTORY"] = "jsscriptdef"; 
					objKernelLibs[1]["FILE"] = "ZAnt.basic.zBasic.HandleErrorZZZ.js";

					//REM Das Original aus dem grundlegendne Import-Tryout.
					//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( 'tryoutAnt_ImportJavascriptJs.js' ) ) );
					for (var i = 0; i < objKernelLibs.length; i++) { 									
						//print("Lies Kernel Ant Js Bibliothek ein: '" + objKernelLibs[i]["ALIAS"]+"'"); 
						//for (var objEigenschaft in objKernelLibs[i]) {
						//	print("Eigenschaft: '" + objEigenschaft + " = " + objKernelLibs[i][objEigenschaft] + "'"); 							
						//}	
						
						//Merke: basedir im Ant-Projekt ist auf ".." gesetzt.
						//print("'../" + objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"] +"'");																
						objKernelLibs[i]["LOADINGSTRING"] = "org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(\"../"+objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"]+"\"))";
						//print("objKernelLibs[i][LOADINGSTRING] = " + objKernelLibs[i]["LOADINGSTRING"]);
						objKernelLibs[i]["LOADER"] = eval(objKernelLibs[i]["LOADINGSTRING"]); //Der LOADER kann dann mit eval('' + eval(objKernelLibs[i]["LOADER"])) ausgeführt werden
						//Das ist dann etwas zuviel und funktioniert nicht... objKernelLibs[i]["CODEEXECUTED"] = eval('' + eval(objKernelLibs[i]["LOADER"])) ;						
					}
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k."
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
			function loadKernelAntJs(objKernelLibs, objControl){
				var sScript = "loadKernelAntJs: ";
				
			    //Erstelle eine Array der grundlegenden JavaScript-Kernel Funktionen.
				//und lies dieses Array ein.
				var bReturn=false; 
				var bReturnControl=false;
				var sReturnControl="Fehler";						
				try{	
					print("#######################");
					if(objKernelLibs==undefined || objKernelLibs==null){
						print("Keine Kernel Ant Js Libs uebergeben zum Laden");
					} else {
						if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
							print("Keine Kernel Ant Js Libs vorhanden zum Laden");
						} else {
							print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
							for (var i = 0; i < objKernelLibs.length; i++) { 	
								print("Lib: " + objKernelLibs[i]["Alias"]);					
								print("Loader: " + objKernelLibs[i]["Loader"]);
								//var erg=eval('' + objKernelLibs[i]["Loader"] +'');
								
								//Beispiel aus dem Tryout:
								//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( 'tryoutAnt_ImportJavascriptJs.js' ) ) );
								
								//ALSO: Wenn der Loader nicht funktioniert hier den Pfad nachbauen.
								//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( '../objKernelLibs[i]["Directory"]/objKernelLibs[i]["File"]')));//Syntax für Dateinamen ist falsch
								
								var spath = "../" + objKernelLibs[i]["DIRECTORY"] + "/" + objKernelLibs[i]["FILE"];
								//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader('" + spath + "')));//file not found exception spath!!
								
								//Man muss 2mal eval kombinieren, um den Loader-String einzusetzen.
								//org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(spath)); //So wird die datei gefunden
								//eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader(spath)) ); //So werden die Funktionen aus der gefundene Datei bereitgestellt
								eval('' + eval(objKernelLibs[i]["LOADER"])); //funktioniert
								//eval(objKernelLibs[i]["CODEEXECUTED"]);   //funktioniert NICHT, ist dann ein bissl zuviel
								
								//mal sehn, ob die letze funktion des externen Scripts zur Verfügung steht.
								errorTraced();
							}
						}
					}					
					print("#######################");
					print("### Versuche errorTraced auszufuehren");
					//mal sehn, ob die letze funktion des externen Scripts zur Verfügung steht.
					errorTraced();
					print("### errorTraced ausgefuehrt");
					print("#######################");
					
					print("#######################");
					print("### Versuche reflectMethodCurrent_Name auszufuehren");
					//mal sehn, ob die reflectMethodCurrent_Name funktion des externen Scripts zur Verfügung steht.
					var objControlCaller = new Object();
					var stemp = reflectMethodCurrent_Name(null, objControlCaller);
					if(!objControlCaller.bReturnControl) throw new Error(sScript + objControlCaller.sReturnControl);					
					print("### reflectMethodCurrent_Name ausgeführt. stemp="+stemp);					
					print("#######################");		
					
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k."
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
						
			function tryout_importKernelAntJs(objKernelLibs, objControl){	 
				var sScript = "tryout_importKernelAntJs: ";
				var sReturn="nixnix"; //Ziel dieses Tests ist es den Namen der in der Unterfunktion ermitteltent aufrufenden Funktion an die aufrufende Ant-Script-Ebene zurueckzugeben.
				var bReturnControl=false;
				var sReturnControl="Fehler";	
				
				try{
					var objControlCaller=new Object();						
					loadKernelAntJs(objKernelLibs, objControlCaller); //Obwohl man hierin das Laden der JS-Funktionen durchführt, stehen die Funktionen hier nicht zur Verfügung.
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCallingName: " + objControlCaller.sReturnControl);
											
					//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					//print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
					for (var i = 0; i < objKernelLibs.length; i++) { 	
						//print("Lib: " + objKernelLibs[i]["Alias"]);					
						//print("LOADINGSTRING: " + objKernelLibs[i]["LOADINGSTRING"]);
						eval('' + eval(objKernelLibs[i]["LOADER"])); //Man muss 2mal eval kombinieren, um den Loader-String einzusetzen.
					}
					print("#######################");					
					print("### versuche errorTraced HIER auszuführen");
					errorTraced();
					print("### errorTraced ausgeführt");
					print("#######################");
					
					print("#######################");
					print("### Versuche reflectMethodCurrent_Name auszufuehren");
					//mal sehn, ob die reflectMethodCurrent_Name funktion des externen Scripts zur Verfügung steht.
					var objControlCaller = new Object();
					var stemp = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error(sScript + objControlCaller.sReturnControl);
					print("### reflectMethodCurrent_Name ausgeführt. stemp="+stemp);					
					print("#######################");	
											
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);										
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";		
					print("Name der aktuellen Funktion: "+sScript);
					
					sReturn = tryout_Sub01_Calling(objKernelLibs, objControlCaller);
					if(!objControlCaller.bReturnControl) throw new Error(sScript + objControlCaller.sReturnControl);
					
					sReturnControl="Alles o.k."
					bReturnControl=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					//print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}
			
			function tryout_Sub01_Calling(objKernelLibs, objControl){
				var sReturn="nix"; //Ziel: Den Namen der aufrufenden funktin (also nicht dier dieser tryout_Sub01 Funktion) auf Ant-Script Ebene zu erhalten.
				var bReturnControl=false;
				var sReturnControl="Fehler";
				try{
					var objControlCaller=new Object();
					
                    //HIER DAS EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG
					//print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
					for (var i = 0; i < objKernelLibs.length; i++) { 	
						//print("Lib: " + objKernelLibs[i]["Alias"]);					
						//print("LOADINGSTRING: " + objKernelLibs[i]["LOADINGSTRING"]);
						eval('' + eval(objKernelLibs[i]["LOADER"])); //Man muss 2mal eval kombinieren, um den Loader-String einzusetzen.
					}		
					
					var sScript = reflectMethodCurrent_Name(null, objControlCaller);					
					if(!objControlCaller.bReturnControl) throw new Error("tryout_reflectMethodCurrentName: " + objControlCaller.sReturnControl);
					sScript=sScript+": ";
					sReturnControl=sScript+"Fehler";		
					print("Name der aktuellen (Unter-)Funktion: "+sScript);			
								
					print("##### Namen der aufrufenden Funktion holen ########");
					var sCalling = reflectMethodCalling_Name(null, objControlCaller);
					if(!objControlCaller.bReturnControl) throw new Error(objControlCaller.sReturnControl);
					print("Name der aufrufenden Funktion: "+sCalling);	
					
					sReturn=sCalling;
					bReturnControl=true;
					sReturnControl="Alles o.k.";
				}catch(err){
					//Funktioniert nicht mit Java7 (RHINO) gibt dort 0 zurück.
					print("TEST, neues ErrorObjekt erzeugen und direkt die Zeilennummer ausgeben: "  + (new Error).lineNumber);	

				
					//#### SIMPLES ERROR HANDLING #######									
					print("Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return sReturn;
			}
		]]>
	</scriptdef>
  

	   
       
     
<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!-- <target name="compile" depends="-myTestStringExplode,-myTestStringSubstring,-myTestStringLeftString,-myTestStringRightString,-myTestStringLeftBackString,-myTestStringContainsString,-myTestStringCountString"> -->
 <!-- TODO Test für stringUnencodeJsZZZ und stringEncodeJsZZZ -->
 <!--<target name="compile" depends="-myTestImportKernelAntJs, ">-->
 <target name="compile" depends="-myTestImportKernelAntJs">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
   
  <target name="-myTestImportKernelAntJs">
		<fl:let>sScript::='-myTestImportKernelAntJs: '</fl:let>
		<echo>${sScript}Start</echo>
		<!--<ac:var name="myReturnControl" value="false" unset="true"/>-->
		<!--<ac:var name="myReturnControlString" value="Fehler" unset="true"/>-->
		<fl:let>myReturnControl::=false</fl:let>
		<fl:let>myReturnControlString::="Fehler"</fl:let>
		<echo message="1. myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->		
		<tryout_importKernelAntJs returnstring="myReturnString" returncontrol="myReturnControl" returncontrolstring="myReturnControlString" />
		<echo message="myReturnControl | myReturnConstrolString = ${myReturnControl} | ${myReturnControlString} " />
		<ac:if>
			<equals arg1="false" arg2="${myReturnControl}"/>
			<ac:then>							
				<echo>${sScript}Fehler aus Funktion zurueckgegeben: ${myReturnControlString}</echo>	
				<fail message="${myReturnControlString}" /><!-- Das fail bewirkt, dass das Ant Script sofort abgebrochen wird --><!-- das keepgoing-Attribut koennte in der for-Schleife sichergestellt werden, das jetzt nicht alles komplett aufhört -->				
			</ac:then>		
		</ac:if>
		<echo message="Zurueckgegeber Wert = ${myReturnString}" />
		<echo message="############################" />
				
	</target> 
	
	
 </project>