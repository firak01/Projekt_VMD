<?xml version="1.0" encoding="UTF-8" ?>  
<project name="test_StringHandlingJsZZZ"   default="compile" basedir=".."
	xmlns:fl="antlib:it.haefelinger.flaka" 
	xmlns:ac="antlib://net/sf/antcontrib"><!-- damit definiert man für antcontrib , bzw. FLAKA einen eigenen Namespace. Antcontrib wird hier per taskdef (siehe unten) hinzugefügt. -->

	 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
   <!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedir in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<import file="../scriptdef/ZAnt_basic_zBasic_ExceptionZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_ArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_test_HelperZZZ.xml"/>

	<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
<!-- ######## Scriptdefs ############################################################################--> 
<!-- TODO: Scriptdefs in eigene Bibliothek auslagern -->
	
<!-- TODO: Diese Funktion in den JSZ-Kernel uebernehmen -->
 <scriptdef name="stringContainsStringZZZ" language="javascript">
 <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returnboolean" />     
     <![CDATA[
	   var text = attributes.get("text");
       var match = attributes.get("matchstring");
       
       var bReturn = text.indexOf(match)> -1;
	   
       project.setProperty(attributes.get("returnboolean"), bReturn);
     ]]>
  </scriptdef>
  
  <!-- ########################### -->
<!-- TODO: Diese Funktion in den JSZ-Kernel uebernehmen -->
 <scriptdef name="stringCountStringZZZ" language="javascript">
 <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returninteger" />     
     <![CDATA[
	   var text = attributes.get("text");
       var match = attributes.get("matchstring");
       	   
	   //Merke: So bindet man per Prototype erzeugte, die Klassen erweiternde Methoden in dieses CDATA-Konstrukt ein.   
	   String.prototype.count = function(lit, cis) {
	    //lit is the string to search for ( such as 'ex' ), and 
	    //cis is case-insensitivity, defaulted to false, it will allow for choice of case insensitive matches.
		var m = this.toString().match(new RegExp(lit, ((cis) ? "gi" : "g")));
		return (m != null) ? m.length : 0;
	  }
	  
       var iReturn = text.count(match, false);	   
	   
       project.setProperty(attributes.get("returninteger"), iReturn);
	   	   
	  
     ]]>
  </scriptdef>

   <!-- ########################### -->
<scriptdef name="stringEncodeJsZZZ" language="javascript">
	<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
	<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
				Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. --> 
	<attribute name="inputstring" />
    <attribute name="returnstring" /> 
	<attribute name="returncontrol" />     
     <![CDATA[
	 //TODO: Die Encoding Erweiterung in den JSZ - Kernel bringen.
		print("Starte stringEncodeJsZZZ");
			  	
       var myString = attributes.get("inputstring");
       print("myString="+myString);
	   
	   var myReturnControl=false;

	   var textEncoded = encodeMyHtml(myString);
	   print("encoded textstring=" + textEncoded);
	  
	   //Feedback, ob etwas geändert worden ist.	  
	   if(textEncoded!=myString){			
			myReturnControl = true;
		};
	   	   	 
       project.setProperty(attributes.get("returnstring"), textEncoded);
	   project.setProperty(attributes.get("returncontrol"), myReturnControl);
	   
	   
	   //TODO: In den JSZ Kernel bringen
		function encodeMyHtml(htmlToEncode) {
		 var encodedHtml = escape(htmlToEncode);
		 encodedHtml = encodedHtml.replace(/\//g,"%2F");
		 encodedHtml = encodedHtml.replace(/\?/g,"%3F");
		 encodedHtml = encodedHtml.replace(/=/g,"%3D");
		 encodedHtml = encodedHtml.replace(/&/g,"%26");
		 encodedHtml = encodedHtml.replace(/@/g,"%40");
		 return encodedHtml;
		 //merke: mit unescape(...) bekommt man den korrekten String wieder zurück.
	   }
     ]]>
  </scriptdef>	  
	  
  <!-- ########################### -->
 <scriptdef name="stringRightStringZZZ" language="javascript">
	 <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
	<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
				Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
		<attribute name="text" />
		<attribute name="matchstring" />
		<attribute name="returnstring" />     
		 <![CDATA[
		   var text = attributes.get("text");
		   //print("entgegengenommenes Attribut text="+text);
		   var match = attributes.get("matchstring");
		   //print("entgegengenommenes Attribut matchstring="+match);
		   
		    //! FEHLER, Z.B. BEI EINEM BEGINNENDEN BACKSLASH, darum encoden.
			var matchToEncode=match;
			var matchEncoded =encodeMyHtml(matchToEncode);
			//print("encoded matchstring=" + matchEncoded);
		   		    
			var textToEncode=text;
			var textEncoded=encodeMyHtml(textToEncode);
			//print("encoded textstring=" + textEncoded);
		   
		   sReturn = getStrRightStr(textEncoded, matchEncoded);
		   //print("sReturn="+sReturn);
		   sReturn = unescape(sReturn);
		   //print("sReturn unescaped="+sReturn);
	   
		   project.setProperty(attributes.get("returnstring"), sReturn);
		   
		   //aus JSZ - Kernel 
		   function getStrRightStr(sourceStr, keyStr){
				idx = sourceStr.indexOf(keyStr);
				return (idx == -1 | keyStr=='') ? '' : sourceStr.substr(idx+keyStr.length);
			}
				
		function encodeMyHtml(htmlToEncode) {
		 var encodedHtml = escape(htmlToEncode);
		 encodedHtml = encodedHtml.replace(/\//g,"%2F");
		 encodedHtml = encodedHtml.replace(/\?/g,"%3F");
		 encodedHtml = encodedHtml.replace(/=/g,"%3D");
		 encodedHtml = encodedHtml.replace(/&/g,"%26");
		 encodedHtml = encodedHtml.replace(/@/g,"%40");
		 return encodedHtml;
		 //merke: mit unescape(...) bekommt man den korrekten String wieder zurück.
	   }
		 ]]>
	  </scriptdef>
  
  <!-- ########################### -->
  <scriptdef name="stringLeftBackStringZZZ" language="javascript">
   <!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
   <!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
	<attribute name="text" />
    <attribute name="matchstring" />
    <attribute name="returnstring" />     
     <![CDATA[
	  var text = attributes.get("text");
	  var match = attributes.get("matchstring");
      //print("matchstring="+match); 
	  
	   //! FEHLER, Z.B. BEI EINEM BEGINNENDEN BACKSLASH, darum encoden.
	   var matchToEncode=match;
	   var matchEncoded = encodeMyHtml(matchToEncode);
	   //print("encoded matchstring=" + matchEncoded);
	   
	   var textToEncode=text;
	   var textEncoded = encodeMyHtml(textToEncode);
	   //print("encoded textstring=" + textEncoded);
	  
      sReturn = getStrLeftBackStr(textEncoded, matchEncoded);
	  //print("return vor unescape: getStrLeftBackStr=" + sReturn);
	  sReturn = unescape(sReturn);
      project.setProperty(attributes.get("returnstring"), sReturn);
	   
	//äquivalent zu JSZ - Kernel
	//@LeftBack equivalent, !!! casesensitive
	function getStrLeftBackStr(sourceStr, keyStr){
		arr = sourceStr.split(keyStr);
		arr.pop();		//entfernt das letzte Element aus dem Array
		//arr.shift();		//entfernt das erste Element aus dem Array
		//!! so unterschlaegt man aber keyStr: return (keyStr==null | keyStr=='') ? '' : arr.join();		
		
		var sReturn="";
		if(arr.length>=2){
		for (index = 0; index < arr.length-1; ++index) {
			sReturn=sReturn+arr[index]+keyStr;
		}
		}
		sReturn=sReturn+arr[arr.length-1];
		return sReturn;
		
	}
	
	//TODO: In den JSZ Kernel bringen
		function encodeMyHtml(htmlToEncode) {
		 var encodedHtml = escape(htmlToEncode);
		 encodedHtml = encodedHtml.replace(/\//g,"%2F");
		 encodedHtml = encodedHtml.replace(/\?/g,"%3F");
		 encodedHtml = encodedHtml.replace(/=/g,"%3D");
		 encodedHtml = encodedHtml.replace(/&/g,"%26");
		 encodedHtml = encodedHtml.replace(/@/g,"%40");
		 return encodedHtml;
		 //merke: mit unescape(...) bekommt man den korrekten String wieder zurück.
	   }
  ]]>
  </scriptdef>
  

 <!-- ########################### -->
<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
			Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. -->
  <scriptdef name="stringSubStringZZZ" language="javascript">
	<!-- ### ScriptDefs, u.a für die Stringverarbeitung, MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem wg. der Übersicht die Camelcase Variante beibehalten. ###-->
		 <attribute name="text" />
		 <attribute name="start" />
		 <attribute name="end" />
		 <attribute name="property" />
		 <![CDATA[
		   var text = attributes.get("text");
		   if(text==''){
		   //print("Leerstring im JS Teil stringSubStringZZZ");
		   project.setProperty(attributes.get("property"), '');
		   }else{
		   var start = attributes.get("start");
		   var end = attributes.get("end") || text.length();
		   project.setProperty(attributes.get("property"), text.substring(start, end));
		   }
		 ]]>
	</scriptdef>
	
 <!-- ########################### -->
	<scriptdef name="stringUnencodeJsZZZ" language="javascript">
	<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
	<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
				Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. --> 
	<attribute name="inputstring" />
    <attribute name="returnstring" />
    <attribute name="returncontrol" />	
     <![CDATA[
	 //TODO: Die Encoding Erweiterung in den JSZ - Kernel bringen.
	 //TODO: Die Erweiterung endsWithPos in den JSZ - Kernel packen
	 print("Starte stringUnencodeJsZZZ");
	  
	 var myString = attributes.get("inputstring");
     //print("myString="+myString); 
	 var myReturnControl=false;
			  	  
	 var myStringUnencoded=unescape(myString);	  
	 //print("myStringUnencoded =" + myStringUnencoded);
	   
	 //Feedback, ob etwas geändert worden ist.	  
	 if(myStringUnencoded!=myString){			
		myReturnControl = true;
	 };
	   project.setProperty(attributes.get("returncontrol"), myReturnControl);	   	   	 			
       project.setProperty(attributes.get("returnstring"), myStringUnencoded);
     ]]>
  </scriptdef>	
  
<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!-- <target name="compile" depends="-myTestStringExplode,-myTestStringSubstring,-myTestStringLeftString,-myTestStringRightString,-myTestStringLeftBackString,-myTestStringContainsString,-myTestStringCountString"> -->
 <!-- TODO Test für stringUnencodeJsZZZ und stringEncodeJsZZZ -->
 <target name="compile" depends="-myTestStringExplode">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
  <target name="-myTestStringContainsString">
		<echo>myTestStringContainsString: </echo>
		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringContainsStringZZZ text="${totaltext01}" matchstring="sdf" returnboolean="bcontains" />
		<echo message="bcontains = ${bcontains}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="11111111111" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringContainsStringZZZ text="${totaltext02}" matchstring="sdf" returnboolean="bcontains" />		
		<echo message="bcontains = ${bcontains}" />
		
	</target> 
		
	<target name="-myTestStringCountString">
		<echo>myTestStringCountString: </echo>
		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringCountStringZZZ text="${totaltext01}" matchstring="sdf" returninteger="icontains" />
		<echo message="icontains = ${icontains}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="11111111111" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringCountStringZZZ text="${totaltext02}" matchstring="sdf" returninteger="icontains" />		
		<echo message="icontains = ${icontains}" />
		
	</target> 

	<target name="-myTestStringExplode">
		<fl:let>sScript::='-myTestStringExplode: '</fl:let>
		<fl:let>sTrace::=""</fl:let>
				
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringLeftStringJsZZZ</fl:logo>	
				
		<echo>#### Eingabewert ohne Backslash ##############################</echo>
		<fl:let>sValue::="a,b,c"</fl:let>
		<echoproperties prefix="sValue"/>
		
		<fl:let>sDelimiter::=","</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		<echo> </echo>
		<echo>#### Eingabewert mit Backslash, Delimiter normales Zeichen ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins'</fl:let>
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="i"</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
				
		<echo> </echo>
		<echo>#### Eingabewert mit abschliessendem Backslash, Delimiter normales Zeichen ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins\\'</fl:let><!-- Der Backslash muss maskiert werden -->
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="i"</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		<echo> </echo>
		<echo>#### Eingabewert mit Backslash, Delimiter Backslash ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins'</fl:let>
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="\\"</fl:let><!-- Der Backslash muss maskiert werden -->
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		<echo> </echo>
		<echo>#### Eingabewert mit abschliessendem Backslash, Delimiter Backslash ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins\\'</fl:let><!-- Der Backslash muss maskiert werden -->
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="\\"</fl:let><!-- Der Backslash muss maskiert werden -->
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
	</target>
	
	<target name="-myTestStringSubstring">
		<echo>myTestStringSubstring: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<stringSubstringZZZ text="asdfasdfasdf" start="2" end="10" property="subtext" />
		<echo message="subtext = ${subtext}" />
		
		<stringSubStringZZZ text="asdfasdfasdf" start="0" end="1" property="subtext" />
		<echo message="subtext = ${subtext}" />
	</target> 
	
	<target name="-myTestStringLeftString">
		<fl:let>sScript::='-myTestArrayAppendJsZZZ: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringLeftStringJsZZZ</fl:logo>	
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftStringJsZZZ inputstring="asdfasdfasdf" inputmatchstring="fas" returnstring="lefttext"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="lefttext = ${lefttext}" />
		
		<stringLeftStringJsZZZ inputstring="asdfasdfasdf" inputmatchstring="sdf" returnstring="lefttext"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="lefttext = ${lefttext}" />
	</target> 
	
	
	<target name="-myTestStringRightString">
		<echo>myTestStringRight: </echo>
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringRightStringZZZ text="asdfasdfasdf" matchstring="fas" returnstring="righttext" />
		<echo message="righttext = ${righttext}" />
		
		<stringRightStringZZZ text="asdfasdfasdf" matchstring="sdf" returnstring="righttext" />
		<echo message="righttext = ${righttext}" />
	</target> 
	
	
	<target name="-myTestStringLeftBackString">
		<echo>myTestStringLeftBackString: </echo>
		<property name="totaltext04" value="asdfa" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<property name="matchstring04" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<echo message="totaltext = ${totaltext04}" />
		<echo message="matchstring = ${matchstring04}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringZZZ text="${totaltext04}" matchstring="${matchstring04}" returnstring="leftbacktext" />
		<echo message="leftbacktext = ${leftbacktext}" />
		
		<echo>#####################################</echo>
		<property name="totaltext03" value="asdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<property name="matchstring03" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<echo message="totaltext = ${totaltext03}" />
		<echo message="matchstring = ${matchstring03}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringZZZ text="${totaltext03}" matchstring="${matchstring03}" returnstring="leftbacktext" />
		<echo message="leftbacktext = ${leftbacktext}" />
		
		<echo>#####################################</echo>
		<property name="totaltext" value="asdfasdfa" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<property name="matchstring" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<echo message="totaltext = ${totaltext}" />
		<echo message="matchstring = ${matchstring}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringZZZ text="${totaltext}" matchstring="${matchstring}" returnstring="leftbacktext" />
		<echo message="leftbacktext = ${leftbacktext}" />
		
		<echo>#####################################</echo>
		<property name="totaltext02" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->	
		<property name="matchstring02" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->	
		<echo message="totaltext = ${totaltext02}" />
		<echo message="matchstring = ${matchstring02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringZZZ text="${totaltext02}" matchstring="${matchstring02}" returnstring="leftbacktext" />
		<echo message="leftbacktext = ${leftbacktext}" />
		
	</target> 
 </project>