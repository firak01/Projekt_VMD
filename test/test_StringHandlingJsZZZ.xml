<?xml version="1.0" encoding="UTF-8" ?>  
<project name="test_StringHandlingJsZZZ"   default="compile" basedir=".."
	xmlns:fl="antlib:it.haefelinger.flaka" 
	xmlns:ac="antlib://net/sf/antcontrib"><!-- damit definiert man für antcontrib , bzw. FLAKA einen eigenen Namespace. Antcontrib wird hier per taskdef (siehe unten) hinzugefügt. -->

	 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
   <!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedir in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<import file="../scriptdef/ZAnt_basic_zBasic_ExceptionZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_ArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_test_HelperZZZ.xml"/>

	<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	 
<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!-- <target name="compile" depends="-myTestStringExplode,-myTestStringEncode,-myTestStringUnencode,-myTestStringSubstring,-myTestStringLeftString,-myTestStringRightString,-myTestStringLeftBackString,-myTestStringContainsString,-myTestStringCountString"> -->
 <target name="compile" depends="-myTestStringUnencode">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
  <target name="-myTestStringContainsString">
		<fl:let>sScript::='-myTestStringContainsString: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringContainsStringJsZZZ</fl:logo>

		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringContainsStringJsZZZ inputstring="${totaltext01}" inputmatchstring="sdf" returnboolean="bcontains" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="bcontains = ${bcontains}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="11111111111" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringContainsStringJsZZZ inputstring="${totaltext02}" inputmatchstring="sdf" returnboolean="bcontains" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="bcontains = ${bcontains}" />
		
	</target> 
		
	<target name="-myTestStringCountString">
		<fl:let>sScript::='-myTestStringCountString: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringCountStringJsZZZ</fl:logo>

		<echo>myTestStringCountString: </echo>
		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringCountStringJsZZZ inputstring="${totaltext01}" inputmatchstring="sdf" returninteger="icontains" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="icontains = ${icontains}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="11111111111" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringCountStringJsZZZ inputstring="${totaltext02}" inputmatchstring="sdf" returninteger="icontains" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>	
		<echo message="icontains = ${icontains}" />
		
	</target> 
	
	<target name="-myTestStringEncode">
		<fl:let>sScript::='-myTestStringEncode: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringEncodeJsZZZ</fl:logo>

		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringEncodeJsZZZ inputstring="${totaltext01}" returnstring="returntext01" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="returntext = ${returntext01}" />
		<echo message="returnchanged = ${myReturnChanged}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="äsdfäsdfäsdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringEncodeJsZZZ inputstring="${totaltext02}" returnstring="returntext02" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="returntext = ${returntext02}" />
		<echo message="returnchanged = ${myReturnChanged}" />
		<echo message="############################" />
		
	</target> 

	<target name="-myTestStringExplode">
		<fl:let>sScript::='-myTestStringExplode: '</fl:let>
		<fl:let>sTrace::=""</fl:let>
				
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringLeftStringJsZZZ</fl:logo>	
				
		<echo>#### Eingabewert ohne Backslash ##############################</echo>
		<fl:let>sValue::="a,b,c"</fl:let>
		<echoproperties prefix="sValue"/>
		
		<fl:let>sDelimiter::=","</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		<echo> </echo>
		<echo>#### Eingabewert mit Backslash, Delimiter normales Zeichen ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins'</fl:let>
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="i"</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
				
		<echo> </echo>
		<echo>#### Eingabewert mit abschliessendem Backslash, Delimiter normales Zeichen ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins\\'</fl:let><!-- Der Backslash muss maskiert werden -->
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="i"</fl:let>
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		<echo> </echo>
		<echo>#### Eingabewert mit Backslash, Delimiter Backslash ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins'</fl:let>
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="\\"</fl:let><!-- Der Backslash muss maskiert werden -->
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
		
		<echo> </echo>
		<echo>#### Eingabewert mit abschliessendem Backslash, Delimiter Backslash ##############</echo>
		<fl:let>sValue::='c:\test\directory\nocheins\\'</fl:let><!-- Der Backslash muss maskiert werden -->
		<echoproperties prefix="sValue"/>
		<!--<echo>${sScript}sString2escape=${sString2escape}</echo>-->
		<fl:let>sDelimiter::="\\"</fl:let><!-- Der Backslash muss maskiert werden -->
		<arrayInitJsZZZ isize="0" arrayreturn="returnArray"/>	<!-- Das Testarray wieder neu initialisieren -->
		<stringExplodeJsZZZ inputstring="${sValue}" inputdelimiter="${sDelimiter}" returnarraystring="returnArray" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<arrayCopyJsZZZ arrayinput="${returnArray}" arrayreturn="myArray" sflagcontrol="" />
		<arrayDebugJsZZZ arrayinput="${myArray}" ilevel="1"/>
	</target>
	
	<target name="-myTestStringSubstring">
		<fl:let>sScript::='-myTestStringSubstring: '</fl:let>
		
		<!-- Wende hier von antcontrib den try...catch mechanismus an. -->
		<trycatch property="myError" reference="myErrorObject">
		<try>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringLeftBackStringJsZZZ</fl:logo>
		
				
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<stringSubStringJsZZZ inputstring="asdfasdfasdf" inputindexstart="2" inputindexend="10" returnstring="subtext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="substring = ${subtext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
		
		
		<stringSubStringJsZZZ inputstring="asdfasdfasdf" inputindexstart="0" inputindexend="1" returnstring="subtext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="substring = ${subtext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
		</try>
		<catch>
			<echo>In &lt;catch&gt;.</echo>
			<echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo>
		</catch>
		<finally>
			<echo>In &lt;finally&gt;.</echo>
		</finally>
		</trycatch>			
	</target> 
	
	<target name="-myTestStringLeftBackString">
		<fl:let>sScript::='-myTestStringLeftBackString: '</fl:let>
		
		<!-- Wende hier von antcontrib den try...catch mechanismus an. -->
		<trycatch property="myError" reference="myErrorObject">
		<try>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringLeftBackStringJsZZZ</fl:logo>
		
		
		
		<property name="totaltext04" value="asdfx" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<property name="matchstring04" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<echo message="totaltext = ${totaltext04}" />
		<echo message="matchstring = ${matchstring04}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringJsZZZ inputstring="${totaltext04}" inputmatchstring="${matchstring04}" returnstring="leftbacktext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="leftbacktext = ${leftbacktext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
		
		<property name="totaltext03" value="asdfasdf" />
		<property name="matchstring03" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<echo message="totaltext = ${totaltext03}" />
		<echo message="matchstring = ${matchstring03}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringJsZZZ inputstring="${totaltext03}" inputmatchstring="${matchstring03}" returnstring="leftbacktext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="leftbacktext = ${leftbacktext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
				
		<property name="totaltext" value="asdfasdfx" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<property name="matchstring" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->			
		<echo message="totaltext = ${totaltext}" />
		<echo message="matchstring = ${matchstring}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringJsZZZ inputstring="${totaltext}" inputmatchstring="${matchstring}" returnstring="leftbacktext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="leftbacktext = ${leftbacktext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />

		<property name="totaltext02" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->	
		<property name="matchstring02" value="sdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich und properies sind nicht aenderbar -->	
		<echo message="totaltext = ${totaltext02}" />
		<echo message="matchstring = ${matchstring02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftBackStringJsZZZ inputstring="${totaltext02}" inputmatchstring="${matchstring02}" returnstring="leftbacktext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="leftbacktext = ${leftbacktext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />	

		</try>
		<catch>
			<echo>In &lt;catch&gt;.</echo>
			<echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo>
		</catch>
		<finally>
			<echo>In &lt;finally&gt;.</echo>
		</finally>
		</trycatch>				
	</target> 
	
	<target name="-myTestStringLeftString">
		<fl:let>sScript::='-myTestArrayAppendJsZZZ: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringLeftStringJsZZZ</fl:logo>	
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringLeftStringJsZZZ inputstring="asdfasdfasdf" inputmatchstring="fas" returnstring="lefttext"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="lefttext = ${lefttext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
		
		<stringLeftStringJsZZZ inputstring="asdfasdfasdf" inputmatchstring="sdf" returnstring="lefttext"  returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="lefttext = ${lefttext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
	</target> 
	
	<target name="-myTestStringRightString">
		<fl:let>sScript::='-myTestStringRightString: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringRightStringJsZZZ</fl:logo>
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringRightStringJsZZZ inputstring="asdfasdfasdf" inputmatchstring="fas" returnstring="righttext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="righttext = ${righttext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
		
		<stringRightStringJsZZZ inputstring="asdfasdfasdf" inputmatchstring="sdf" returnstring="righttext" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="righttext = ${righttext}" />
		<echo message="valuechanged = ${myReturnChanged}" />
		<echo message="############################" />
	</target> 
	
	<target name="-myTestStringUnencode">
		<fl:let>sScript::='-myTestStringUnencode: '</fl:let>
		
		<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
		<fl:logo>${sScript}
		Meine Loesung: Scriptdef stringUnencodeJsZZZ</fl:logo>

		<property name="totaltext01" value="asdfasdfasdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext01}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringEncodeJsZZZ inputstring="${totaltext01}" returnstring="returntext01" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="returntext = ${returntext01}" />
		<echo message="returnchanged = ${myReturnChanged}" />
		
		<echo message="######## Nun wieder zurueckcodieren" />
		<stringUnencodeJsZZZ inputstring="${returntext01}" returnstring="returntext01b" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="returntextb = ${returntext01b}" />
		<echo message="returnchanged = ${myReturnChanged}" />
		<echo message="############################" />
		
		<property name="totaltext02" value="äsdfäsdfäsdf" /><!-- merke flaka ist hier nicht eingebunden, als kein fl:let moeglich -->	
		<echo message="totaltext = ${totaltext02}" />
		
		<!-- Hier wird die scriptdef Methode aufgerufen -->
		<stringEncodeJsZZZ inputstring="${totaltext02}" returnstring="returntext02" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="returntext = ${returntext02}" />
		<echo message="returnchanged = ${myReturnChanged}" />
		
		<echo message="######## Nun wieder zurueckcodieren" />
		<stringUnencodeJsZZZ inputstring="${returntext02}" returnstring="returntext02b" returnchanged="myReturnChanged" returncontrol="myReturnControl" returnControlString="myReturnControlString" sflagcontrol="" />
		<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
		<echo message="returntextb = ${returntext02b}" />
		<echo message="returnchanged = ${myReturnChanged}" />
		<echo message="############################" />
		
	</target> 
	
 </project>