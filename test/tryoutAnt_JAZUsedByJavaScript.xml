<?xml version="1.0" encoding="UTF-8" ?>  
<project name="tryoutAnt_JAZUsedByJavaScript"  default="compile" basedir="..">

	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<!-- gebraucht wird das z.B. für den <for> </for> Task. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>


 <!-- ########################### -->
 <!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in den eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten. -->
 <scriptdef name="tryout_jaz_string_camelcase" language="javascript">
     <attribute name="filename_search" />
     <attribute name="filenames" />
	 <attribute name="filelengths" />
	 <attribute name="tryout" />
     <![CDATA[
		   //Allgemein für Import Statements gilt:
		   //importClass(Package.zxyz.abc.myclassZZZ);//um Verkürzt auf File zuzugreifen. sonst nur sinnvoll für Klassen, die nicht BasisJava sind und dann ist 'Package' notwendig
		   //                                                                  //Bei Klassen, die aus dem BasisJava stammen darf 'Package' nicht verwendet werden:    importClass(java.io.File);
	 
		   // import statements, funktionieren beide
			//importClass(package.basic.zBasic.util.datatype.string.StringZZZ);
			//importPackage(basic.zBasic.util.datatype.string);
			importPackage(Packages.basic.zBasic.util.datatype.string);
	 
			var test = java.lang.System.getProperty("java.class.path");
			println("classpath="+test);
			
			
			//#############
			 //#### EINGABE ######	 
			var file2search = attributes.get("filename_search");
			println("file2search="+file2search);
			
			//#### Java, etc.
			var serg = StringZZZ.toCamelCase(file2search,"_");
			//var serg = "test ohne java";
			println("serg="+serg);
			
			// create and use a Task via Ant API
			//funktioniert hier nicht, selbst wenn man den Projektnamen angibt echo = MyProject.createTask("echo");
			//echo = self.getProject().createTask("echo");
			//echo.setMessage("Ergebnis + ": " + serg);
			//echo.perform();
         
			  
		//	var arrayFilenames=new Array();
		//	var arrayFilelengths=new Array();
			
		//	arrayFilenames.push('Woa'); 
		//	arrayFilenames.push('Wob'); 
		//	arrayFilelengths.push(1234); 
			
			
			//#### RÜCKGABE #####
		//	project.setProperty(attributes.get("tryout"), "Text zurueckgeben: " + serg);  
		//	project.setProperty(attributes.get("filenames"), arrayFilenames);
		//	project.setProperty(attributes.get("filelengths"), arrayFilelengths); 
	      ]]>
  </scriptdef>
         
  
<!-- ################################################################################# -->
 <target name="compile" depends="myTestJAZUsedByJavaScript">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
	<target name="myTestJAZUsedByJavaScript">
		<echo>myTestJavaUsedByJavaScript: </echo>
		<property name="fs.dir" value="../testused"/>
		<property name="fs.includes" value="**/*.txt"/>
		<property name="fs.excludes" value="**/*.tmp"/>

		
		<!-- Hier wird die scriptdef Methode tryout_java_file_length aufgerufen -->
		<tryout_jaz_string_camelcase filename_search="Das_ist_ein_camelcase_test" filenames="myfilenames" filelengths="myfilelengths" tryout="mytryout_string"/>
		<echo message="mytryout_string = ${mytryout_string}" />
		
		<!-- Verwende antcontrib für eine Schleife über die Arrays --><!-- do something with @{myelement} -->
<!-- 		<for list="${myfilenames}" param="myelement">
			<sequential>				
				<echo>myelement= @{myelement}</echo>
			</sequential>
		</for> -->
		
	</target> 
 </project>