<project name="tryoutAnt_ContribAntcallback"  default="compile" basedir=".."
		xmlns:fl="antlib:it.haefelinger.flaka"
		xmlns:ac="antlib://net/sf/antcontrib">   <!-- damit definiert man für antcontrib , bzw. FLAKA einen eigenen Namespace. Antcontrib wird hier per taskdef (siehe unten) hinzugefügt. -->

 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
<!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedr in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<!--<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_arrayZZZ.xml"/>-->

<!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!-- <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" />
	<taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
	
	
<!-- ######### AntContrib: Callback Targets, quasi als ausgelagerte Unterfunktionen ################################-->
<!--           Merke: Es gibt auch im Standard eine AntCall und AntCallBack Task -->

<!-- ############################################################################### -->
<target name="-replaceString">   
	<echo>###################</echo>
	<property name="normalValueSpaced" value="The quick brown fox jumps" />
	<echo>Ausgangswert: ${normalValueSpaced}</echo>
	<echo>Ersetze normalen Wert: fox durch dogge</echo>
	<propertyregex property="returnNormalValueReplaced" input="${normalValueSpaced}" regexp="fox" replace="dogge" global="true" /><!--  Merke: Property ist nicht veränderbar, darum für jeden Aufruf eine extra Variable verwenden. -->
	<echo>Ersetzter Wert: ${returnNormalValueReplaced}</echo>
	
	<echo>###################</echo>
	<echo>Ausgangswert: ${normalValueSpaced}</echo>
	<echo>Ersetze normalen Wert: Spaces durch Leerwert</echo>
	<propertyregex property="returnNormalValueUnspaced" input="${normalValueSpaced}" regexp=" " replace="" global="true" /><!--  Merke: Property ist nicht veränderbar, darum für jeden Aufruf eine extra Variable verwenden. -->
	<echo>Ersetzter Wert: ${returnNormalValueUnspaced}</echo>
	
	
	<echo>###################</echo>
		<!-- verwende antcontrib und escape mit 7 backslashe (wenn ein backslash am Ende steht) oder ansonsten 8 Backslashe
	http://mail-archives.apache.org/mod_mbox/ant-dev/200309.mbox/%3C200309051022.57848.peter.reilly@corvil.com%3E -->
	<!--<propertyregex property="mytemp" input="${mysFiledir}" regexp="\\" replace="\\\\\\\" global="true" />--><!-- das funktioniert. Merke: Property ist nicht veränderbar, darum für jeden Aufruf eine extra Variable verwenden. -->
	
		<property name="normalValueBackslashed" value="The\quick\brown\fox\jumps\" />
		<echo>Ausgangswert: ${normalValueBackslashed}</echo>
	<echo>Ersetze Wert mit Backslashes:</echo>
   <propertyregex property="returnNormalValueBackslashed" input="${normalValueBackslashed}" regexp="\\" replace="\\\\\\\" global="true" /><!--  Merke: Property ist nicht veränderbar, darum für jeden Aufruf eine extra Variable verwenden. -->
   <echo>Ersetzter Wert: ${returnNormalValueBackslashed}</echo>
	
	<echo>###################</echo>
		<property name="normalValueBackslashed2" value="The\\quick\\brown\\fox\\jumps\\" />
		<echo>Ausgangswert: ${normalValueBackslashed2}</echo>
	<echo>Ersetze Wert mit Backslashes2:</echo>
   <propertyregex property="returnNormalValueBackslashed2" input="${normalValueBackslashed2}" regexp="\\" replace="\\\\\\\" global="true" />
   <echo>Ersetzter Wert: ${returnNormalValueBackslashed2}</echo>     
</target>


<!-- ######## Targets ############################################################################--> 	
 <target name="-stringEscapeBackslashZZZ">
	<fl:let>sScript::='-stringEscapeBackslashZZZ: '</fl:let>
	<fl:let>sTrace::=""</fl:let>
	 
	<!-- Escape den Backslash. Dies in ein Hilfstarget packen, das propertyRegex mit einer Property statt Variablen arbeitet.
							   Properties aendern aber nicht ihren Wert innerhalb eines Targets, was unguenstig fuer Schleifen ist.		-->		
	<fl:let>mysString::="${stringInput}"</fl:let>
	<fl:let>returnControl::=false</fl:let>
	<fl:let>returnString::="${stringInput}"</fl:let>				
	
	<!-- Aufruf des propertyregex Targets: Hier zum verdoppeln der Backslashe -->	
	<!--<propertyregex property="mytemp" input="${mysString}" regexp="\\" replace="\\\\\\\\\\\\\\\" global="true" />--><!-- das funktioniert aber die Backslashe nur zu verdoppeln reicht nicht, hier: vervierfachen -->
	<propertyregex property="mytemp" input="${mysString}" regexp="\\" replace="\\\\\\\" global="true" />
	<fl:let>mysString::='${mytemp}'</fl:let><!--wichtig: In Hochkommata setzen. Dadurch wird der Wert 'byValue' uebergeben, aber: Es wird einmal die Backslashverdoppelung wieder entfernt. -->							
				
	<!-- Rueckgabewerte -->
	<ac:var name="returnString" value="${mysString}" />
	<ac:var name="returnControl" value="true" />
	<ac:var name="returnTrace" value="${sScript} Alles ok.|${sTrace}" />
	<!-- <arrayCopyJsZZZ arrayinput="${myaError}" arrayreturn="returnaString" sflagcontrol="" /> --><!-- So gibt man einen Arraywertzurueck -->			
</target>
  
  
  <!-- ########################### -->
  <target name="-declaration"><!-- damit dies ncht z.B. beim Aufruf jedes ant-callback erneut gemacht wird, die Property Dekalarationen in ein eigenes target packen. Aber: Dafür sorgen dass die Deklaration vor allen anderen Targets ausgeführt wird. -->
	<echo>##############################</echo>
	<echo>In diesem Tryout werden folgende Punkte ausprobiert, die teilweise nur mit ant-contrib lösbar sind:</echo>
	<echo>1) Einen Stringwert ersetzen. Interessant wird es beim Ersetzen von Backslashes</echo>
	
  </target>
  
<!-- ################################################################################# -->
<!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <target name="compile" depends="-declaration, -replaceString">
    <echo>Im default - Target..., das von allen anderen Targets abhängt und daher zuletzt ausgeführt wird. </echo>
	<!-- TODO: Test für stringEscapeBackslashZZZ -->
	
	
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
 </project>