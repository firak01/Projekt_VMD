<?xml version="1.0" encoding="UTF-8" ?>  
<project name="test_vmdRelevant"   default="compile" basedir=".."
	xmlns:ac="antlib://net/sf/antcontrib"
	xmlns:fl="antlib:it.haefelinger.flaka">
	 <!-- ### Notepad++ Hotkeys:
        ALT + 0, ALT +1, .... XML Tags der Ebene zusammenklappen. -->
    
	<!-- ### Einbinden der ZKernel - Ant Bibliotheken. Darin liegen die Scriptdefs an einer zentralen Stelle. ### -->
	<!--     Die Definiton von basedir in diesem aufrufenden Projekt hat scheinbar keine Auswirkung. Man muss ../ davorsetzen. -->
	<!--     Erstellt man in diesem importierenden Projekt ein importiertes Target, so wird das importierte Target überschrieben. -->
	<import file="../scriptdef/ZAnt_basic_zBasic_ExceptionZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_string_StringArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_datatype_ArrayZZZ.xml"/>
	<import file="../scriptdef/ZAnt_basic_zBasic_util_test_HelperZZZ.xml"/>
	<import file="../scriptdef/ZAnt_custom_zProject_vmd_MachineRessourceZZZ.xml"/>
	
	<!-- damit definiert man für antcontrib einen eigenen Namespace -->
	<!-- damit definiert man für FLAKA einen eigenen Namespace -->
      
   <!-- ### Einbinden von Ant-Contrib ### -->
   <!-- ### Einbinden von Ant-Contrib, wenn man die verschiedenene Tasks mit einem eigenenen Namen versehen möchte, z.B. <if-contrib> verwenden statt <if> ### -->
	<!--    <taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	 <taskdef name="if-contrib" classname="net.sf.antcontrib.logic.IfTask" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" />
	 <taskdef name="for-contrib" classname="net.sf.antcontrib.logic.ForTask" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" />
	 <taskdef name="var-contrib" classname="net.sf.antcontrib.property.Variable" classpath="${basedir}/../lib/ant-contrib-1.0b3.jar" /> -->
 
	<!-- ### Einbinden von Ant-Contrib, hierbei muss man die Task-Namen so wählen, wie sie in der ant-contrib Doku benannt sind ### -->
	<!--        Der Vorteil ist, das man mit der einen Deklaration alle Tasks nutzen kann, der Nachteil ist, man kann keinen 'namespace' faken -->
	<!-- gebraucht wird das z.B. für den <for> </for> Task. -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
		<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>
	
<!-- ################################################################################# -->
	<!-- Die einzelnen Tests im depends hinzufügen -->
  <!-- Merke: 'interne Targets' sollten mit einem Minuszeichen beginnen, so dass sie von aussen nicht gestartet werden können.
             Dies gibt einen 'unknown argument' Fehler, der sich unter Windows auch nicht mit dem Setzen in Hockkommata umgehen.-->
 <!-- <target name="compile" depends="-declaration,-myTestIsFilenameRelevantVMD,-myTestComputeFilenameHostVMD,-myTestIsFileVmdHostOnHostVMD,-myTestIsFileVmdClientOnHostVMD,-myTestIsFileVmdClientOnHostNamedVMD,-myTestIsHostVMD,-myTestIsClientVMD,-myTestComputeFilenameClientHostNamedVMD,-myTestComputeFilenameVMD"> -->
 <target name="compile" depends="-declaration,-myTestComputeFilenameVMD,-myTestIsClientVMD,-myTestComputeFilenameHostVMD,-myTestComputeFilenameClientHostNamedVMD,-myTestIsHostVMD,-myTestIsFileVmdClientOnHostVMD">
    <echo>Im default - Target..., das von allen anderen Targets abhängt. </echo>
	<!-- WIRD NICHT BENÖTIGT -->
	
    <!-- Compile the java code from ${src} into ${build} -->
	<!-- example how to create a directory -->
    <!-- <mkdir dir="${build}"/>
	-->
    
	<!-- Example how to use a java compile task to compile files from a source file directory (containing .java files) to a build file directory (containig .class files) -->
	<!-- <javac debug="yes" srcdir="${src}" destdir="${build}">
    	<classpath refid="project.classpath"/>
    </javac>
	-->
  </target>
  
    <target name="-declaration">
	  <!-- um EL referencen zusätzlich zu den normalen Ant Referencen anzustellen (außerhalb der Flaka Tasks), muss man die ant standard property 	helper engine austauschen.
	  dies passiert hier durch flaka´s install-property handler task -->
	  <fl:install-property-handler />	
  </target>
  
  <!-- FGL 20161110: TODO GOON - Weitere Funktionenen vorher testen -->
	<target name="-myTestComputeFilenameVMD">
		<fl:let>sScript::='-myTestComputeFilenameVMD: '</fl:let>
		<!-- Versuch unabhängig vom Client oder Hostrechner den VMD-Dateinamen zu errechnen. -->
		
		 <!--  Wende hier von antcontrib den try...catch mechanismus an.--> 
		 <trycatch property="myError" reference="myErrorObject">
		 <try>
		
			<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
			<fl:logo>${sScript}
			Meine Loesung: Target computeFilenameVMD</fl:logo>	

			<!-- Das Betriebssystem, in der Batch ermittelt. -->
			<fl:install-property-handler />
			<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->		
			<echo>VMD_OS=${env.VMD_OS}</echo>
			<fl:let>osUsed::='${env.VMD_OS}'</fl:let>		
			<fl:let>pathClientUsed::="c:\1fgl\client"</fl:let>		
			<antcallback target="-computeFilenameVMD" return="returnFilename">
						<param name="osUsed" value="${osUsed}"/>
						<param name="pathClientUsed" value="${pathClientUsed}"/>					
			</antcallback>
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo>Ermittelter Dateiname= ${returnFilename}</echo>
		 </try>
		 <catch>
		  <echo>In catch.</echo> 
		  <echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo> 
		 </catch>
		 <finally>
		  <echo>In finally.</echo> 
		 </finally>
		 </trycatch>
		
	</target>
  
  
	<target name="-myTestIsHostVMD">
		<fl:let>sScript::='-myTestIsHostVMD: '</fl:let>			
		<!-- Die Datei auf einem Host-Rechner im Verzeichnis c:\1fgl\client -->
		<!-- TODO: Im test-Verzeichnis (also dem gleichen Verzeichnis wie diese test_ * .bat Datei) eine Rechnerspezifische Konfiguration hinterlegen.) -->
		
		 <!--  Wende hier von antcontrib den try...catch mechanismus an.--> 
		<trycatch property="myError" reference="myErrorObject">
		<try>
		
			<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
			<fl:logo>${sScript}
			Meine Loesung: Target isHostVMD</fl:logo>
			
			<antcallback target="-isHostVMD" return="returnControl,returnBoolean">
						<param name="dirPathClient" value="c:\\1fgl\\client"/>				
			</antcallback>			
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="Ergebnis = ${returnBoolean}" />
			
		</try>
		<catch>
		  <echo>In catch.</echo> 
		  <echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo> 
		  </catch>
		<finally>
		  <echo>In finally.</echo> 
		</finally>
		</trycatch>		
	</target>
  	
	
	
	<target name="-myTestComputeFilenameHostVMD">
		<fl:let>sScript::='-myTestComputeFilenameHostVMD: '</fl:let>
				
		<!--  Wende hier von antcontrib den try...catch mechanismus an.--> 
		<trycatch property="myError" reference="myErrorObject">
		<try>
			<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
			<fl:logo>${sScript}
			Meine Loesung: Target computeFilenameHostVMD</fl:logo>
		
			<!-- Das Betriebssystem, in der Batch ermittelt. -->
			<fl:install-property-handler />
			<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->		
			<echo>VMD_OS= ${env.VMD_OS}</echo>
			<fl:let>osUsed::='${env.VMD_OS}'</fl:let>
			
			<antcallback target="-computeFilenameHostVMD" return="returnFilename">
						<param name="osUsed" value="${osUsed}"/>					
			</antcallback>
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo>Ermittelter Dateiname= ${returnFilename}</echo>		
			
		</try>
		<catch>
		  <echo>In catch.</echo> 
		  <echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo> 
		  </catch>
		<finally>
		  <echo>In finally.</echo> 
		</finally>
		</trycatch>		
	</target>
	
	<target name="-myTestComputeFilenameClientHostNamedVMD">
		<!-- Die Datei auf einem Host-Rechner im Verzeichnis c:\VMWare\.... oder auf einem VMWare Client Rechner im Verzeichnis c:\1fgl\Client -->
		<fl:let>sScript::='-myTestComputeFilenameClientHostNamedVMD: '</fl:let>
					
		<!--  Wende hier von antcontrib den try...catch mechanismus an.--> 
		<trycatch property="myError" reference="myErrorObject">
		<try>
			<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
			<fl:logo>${sScript}
			Meine Loesung: Target computeFilenameClientHostNamedVMD</fl:logo>
				
			<!-- Das Betriebssystem, in der Batch ermittelt. -->
			<fl:install-property-handler />
			<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->		
			<echo>VMD_OS= ${env.VMD_OS}</echo>
			<fl:let>osUsed::='${env.VMD_OS}'</fl:let>
			
			<!-- Merke: DUMMYLösung. Hole normalerweise den Hostnamen aus einer Rechnerspezifischen Konfiguration im VMWare-client -->
			<fl:let>myHostUsed::="${env.COMPUTERNAME}"</fl:let><!-- Merke: Aus der Liste der Windows Umgebungsvariablen: DOS Box. SET - Befehl und ENTER --> 	  
			<antcallback target="-computeFilenameClientHostNamedVMD" return="returnFilename">
						<param name="osUsed" value="${osUsed}"/>
						<param name="hostUsed" value="${myHostUsed}"/>						
			</antcallback>
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo>Ermittelter Dateiname= ${returnFilename}</echo>	

		</try>
		<catch>
		  <echo>In catch.</echo> 
		  <echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo> 
		  </catch>
		<finally>
		  <echo>In finally.</echo> 
		</finally>
		</trycatch>				
	</target>
	
	<!-- Die Datei auf einem Host-Rechner im Verzeichnis c:\1fgl\client -->
	<!-- TODO: Es muss rechnerspezifisch hinterlegt werden, wie der Hostname lautet. Den kann der Client nämlich nicht herausbekommen.-->
	<!-- TODO: Im test-Verzeichnis (also dem gleichen Verzeichnis wie diese test_ * .bat Datei) eine Rechnerspezifische Konfiguration hinterlegen.) -->
	<target name="-myTestIsClientVMD">
	<fl:let>sScript::='-myTestIsClientVMD: '</fl:let>
				
		<!--  Wende hier von antcontrib den try...catch mechanismus an.--> 
		<trycatch property="myError" reference="myErrorObject">
		<try>
			<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
			<fl:logo>${sScript}
			Meine Loesung: Target isClientVMD</fl:logo>
		
		
			<fl:install-property-handler />
			<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->
			
			<!-- Berechne den Hostnamen, der ja Bestandteil einer VMD Datei ist. -->
			<!-- Merke: Auf einem Client-Rechner wird dies beim echten Start durch eine spezielle Batch Datei als Variable übergeben.
                        Hier im Test gibt es allerdings keine spezielle Batch, um den HOSTnamen auf einem Rechner in einer VM zu übergeben.                        					-->			
			<fl:let>myHostUsed::="${env.COMPUTERNAME}"</fl:let><!-- Merke: Aus der Liste der Windows Umgebungsvariablen: DOS Box. SET - Befehl und ENTER --> 	  					
			<antcallback target="-isClientVMD" return="returnControl,returnBoolean">
						<param name="dirPathClient" value="c:\\1fgl\\client"/>				
						<param name="hostUsed" value="${myHostUsed}"/>				
			</antcallback>
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="Ergebnis = ${returnBoolean}" />	
		</try>
		<catch>
		  <echo>In catch.</echo> 
		  <echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo> 
		  </catch>
		<finally>
		  <echo>In finally.</echo> 
		</finally>
		</trycatch>			
	</target>	
  
	<!-- Die Datei auf einem Host-Rechner im Verzeichnis c:\1fgl\client\.... -->
	<target name="-myTestIsFileVmdClientOnHostVMD">
	<fl:let>sScript::='-myTestIsFileVmdClientOnHostVMD: '</fl:let>
				
		<!--  Wende hier von antcontrib den try...catch mechanismus an.--> 
		<trycatch property="myError" reference="myErrorObject">
		<try>
			<!-- Merke: Die einzelnen Tests im depends vom target 'compile' hinzufügen-->
			<fl:logo>${sScript}
			Meine Loesung: Scriptdef IsFileVmdClientOnHostJsVMD</fl:logo>
		
	
			<!-- Hier wird die scriptdef Methode substring aufgerufen -->
			<isFileVmdClientOnHostJsVMD stringinput="asdfasdfasdf" booleanreturn="returnControl" />
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="returnControl = ${returnControl}" /><!-- ERWARTE FALSE -->
			
			
			<isFileVmdClientOnHostJsVMD stringinput="dummy.txt" booleanreturn="returnControl" />
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="returnControl = ${returnControl}" />
			
			<!-- ultimativer Test, bei dem der Dateiname tatsächlich berechnet wird -->
			<fl:install-property-handler />
			<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->		
			<echo>VMD_OS= ${env.VMD_OS}</echo>
			<fl:let>osUsed::='${env.VMD_OS}'</fl:let>
			<antcallback target="-computeFilenameHostVMD" return="returnFilename">
						<param name="osUsed" value="${osUsed}"/>					
			</antcallback>
			<echo message="errechneter Dateiname = ${returnFilename}" /><!-- ERWARTE FALSE -->
					
			<isFileVmdClientOnHostJsVMD stringinput="${returnFilename}" booleanreturn="returnControl" />
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="returnControl = ${returnControl}" /><!-- ERWARTE FALSE -->
			
			<!-- Diese Datei DARF kein _HOSTNAME haben -->
			<fl:install-property-handler />
			<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->
			
			<!-- Nach Fgl soll das Kürzel des Betriebssystems kommen, also z.B. FglWin7_UGAKI-SRV_Installationen.txt -->
			<!-- Merke: Gross-/Kleinschreibung ist fuer den Dateinamen wichtig -->		
			<fl:let>myInput::="VM_FGLWin7_Ugaki-SRV_${env.COMPUTERNAME}.txt"</fl:let><!-- Merke: Aus der Liste der Windows Umgebungsvariablen: DOS Box. SET - Befehl und ENTER --> 	  		
			<echo message="myInput=${myInput}" />		
			<isFileVmdClientOnHostJsVMD stringinput="${myInput}" booleanreturn="returnControl" />
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="returnControl = ${returnControl}" /><!-- ERWARTE FALSE -->
			
			<!-- Hier einen gültigen Dateinamen testen -->
			<isFileVmdClientOnHostJsVMD stringinput="VM_FGLWin7_Ugaki-SRV.txt" booleanreturn="returnControl" />
			<catchReturnControlZZZ script="${sScript}" returnControl="${myReturnControl}" returncontrolstring="${myReturnControlString}"/>
			<echo message="returnControl = ${returnControl}" /><!-- ERWARTE TRUE -->
			</try>
		<catch>
		  <echo>In catch.</echo> 
		  <echo>Fehler aus 'fail' in Ant abgefangen: ${myError}</echo> 
		  </catch>
		<finally>
		  <echo>In finally.</echo> 
		</finally>
		</trycatch>		
	</target>
	
	<!-- Die Datei auf einem Host-Rechner im Verzeichnis c:\VMWare\.... oder auf einem VMWare Client Rechner im Verzeichnis c:\1fgl\Client -->
	<target name="-myTestIsFileVmdClientOnHostNamedVMD">
		<echo>myTestIsFileVmdClientOnHostNamedVMD: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<isFileVmdClientOnHostNamedVMD stringinput="asdfasdfasdf" hostinput="nixda" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" /><!-- ERWARTE FALSE -->
		
		<!-- Test: Lasse den 2. Parameter weg -->		
		<isFileVmdClientOnHostNamedVMD stringinput="dummy.txt" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" />
		
		<!-- Diese Datei DARF kein _HOSTNAME haben -->
		<fl:install-property-handler />
		<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->
		
		<!-- Nach Fgl soll das Kürzel des Betriebssystems kommen, also z.B. FglWin7_UGAKI-SRV_Installationen.txt -->
		<!-- Merke: Gross-/Kleinschreibung ist fuer den Dateinamen wichtig -->		
		<fl:let>myInput::="VM_FGLWin7_Ugaki-SRV_${env.COMPUTERNAME}.txt"</fl:let><!-- Merke: Aus der Liste der Windows Umgebungsvariablen: DOS Box. SET - Befehl und ENTER --> 	  		
		<echo message="myInput=${myInput}" />		
		<isFileVmdClientOnHostNamedVMD stringinput="${myInput}" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" /><!-- ERWARTE FALSE -->
		
		<!-- Hier einen gültigen Dateinamen testen, aber ohne den 2. Parameter -->
		<isFileVmdClientOnHostNamedVMD stringinput="VM_FGLWin7_Ugaki-SRV.txt" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" /><!-- ERWARTE FALSE -->
		
		<!-- ultimativer Test, bei dem der Dateiname tatsächlich berechnet wird -->
		<fl:install-property-handler />
		<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->		
		<echo>VMD_OS= ${env.VMD_OS}</echo>
		<fl:let>osUsed::='${env.VMD_OS}'</fl:let>
		<fl:let>hostUsed::='${env.COMPUTERNAME}'</fl:let>
		<antcallback target="-computeFilenameClientHostNamedVMD" return="returnFilename">
					<param name="osUsed" value="${osUsed}"/>					
					<param name="hostUsed" value="${hostUsed}"/>
		</antcallback>
		<echo message="errechneter Dateiname fuer eine Clientdatei auf dem Host= ${returnFilename}" />
				
		<isFileVmdClientOnHostNamedVMD stringinput="${returnFilename}" hostinput="${env.COMPUTERNAME}" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" /><!-- ERWARTE TRUE -->
						
	</target>
  
  
	<target name="-myTestIsFilenameRelevantVMD">
		<echo>myTestIsFilenameRelevantVMD: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<isFilenameRelevantVMD text="asdfasdfasdf" property="returnControl" />
		<echo message="returnControl = ${returnControl}" />
		
		<isFilenameRelevantVMD text="dummy.txt" property="returnControl" />
		<echo message="returnControl = ${returnControl}" />
	</target> 
	
	<!-- Die Datei auf einem Host-Rechner im Verzeichnis c:\1fgl\client -->
	<target name="-myTestIsFileVmdHostOnHostVMD">		
		<echo>myTestIsFileVmdHostOnHostVMD: </echo>
		
		<!-- Hier wird die scriptdef Methode substring aufgerufen -->
		<isFileVmdHostOnHostVMD stringinput="asdfasdfasdf" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" />
		
		
		<isFileVmdHostOnHostVMD stringinput="dummy.txt" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" />
		
		<!-- ultimativer Test, bei dem der Dateiname tatsächlich berechnet wird -->
		<fl:install-property-handler />
		<property environment="env" /><!-- ist voraussetzung um mit 'env' auf die Umgebungsvariablen zuzugreifen -->		
		<echo>VMD_OS= ${env.VMD_OS}</echo>
		<fl:let>osUsed::='${env.VMD_OS}'</fl:let>
		<antcallback target="-computeFilenameHostVMD" return="returnFilename">
					<param name="osUsed" value="${osUsed}"/>					
		</antcallback>
		<echo message="errechneter Dateiname = ${returnFilename}" />
				
		<isFileVmdHostOnHostVMD stringinput="${returnFilename}" booleanreturn="returnControl" />
		<echo message="returnControl = ${returnControl}" />
		
	</target>
 </project>