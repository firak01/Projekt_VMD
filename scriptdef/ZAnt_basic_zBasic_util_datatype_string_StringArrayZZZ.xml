 <project name="ZAnt_basic_util_datatype_string_StringArrayZZZ"   basedir=".."
	xmlns:ac="antlib://net/sf/antcontrib"
	xmlns:fl="antlib:it.haefelinger.flaka"><!-- damit definiert man für FLAKA einen eigenen Namespace -->
	
 <scriptdef name="arrayStringImplodeJsZZZ" language="javascript">
	<!-- Merke: Da scheinbar kein 'call by reference' gemacht wird, muss ein geänderter Wert als neue Variable zurückgegeben werden.-->		
	<!-- MERKE: GROSS-/Kleinschreibung ist bei den Tagnamen wichtig! Trotzdem in der eingesetzten -ZZZ Funktionen wg. der Übersicht die Camelcase Variante beibehalten.
				Bei den Attributen, die in den Tags verwendet werden, funktioniert nur Kleinschreibung. --> 
	<attribute name="sDirRepositoryJsscriptdef" /><!-- Falls mal der Name des Verzeichnisses der Bibliothek überschrieben werden soll -->
				
	<!-- Fügt die Strings eines Arrays zusammen. Dabei untere / oberen Indes als Grenze der zu verarbeitenden Arraywerte angeben. -1 ist jeweils min / max. -->
	<attribute name="inputarraystring" />
	<attribute name="inputdelimiter"/>
	<attribute name="inputindexlow"/>
	<attribute name="inputindexhigh"/>

    <attribute name="returnstring" /> 
	<attribute name="returncontrol" /> 
	<attribute name="returncontrolString" />
	
	
    <![CDATA[
		//normalerweise verwendet man join, wie in dem Beispiel:
		//var str_to_split = "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z";
		//var myarray = str_to_split.split(",");
		//var output=myarray.join("");
		//
		//Aber hier soll nur ein bestimmter Bereich von... bis... gejoint werden. 
		//Sinnvoll um vom Array vorne oder hinten etwas abzuschneiden.
	    
		var sDirRepositoryJsscriptdef = attributes.get("sDirRepositoryJsscriptdef");
		
		var myArrayString = attributes.get("inputarraystring");		
		var myDelimiter = attributes.get("inputdelimiter");
		var myiIndexLow = attributes.get("inputindexlow");
		var myiIndexHigh = attributes.get("inputindexhigh");
		//print("myiIndexLow=" + myiIndexLow);
		//print("myiIndexHigh=" + myiIndexHigh);
		
		
		//There is no "pass by reference" available in JavaScript. You can pass an object (which is to say, you can pass-by-value a reference to an object) and then have a function modify the object contents:
			var sReturn="";
			var bReturn=false; //Wird hier nicht zurueckgegeben
			var bReturnControl=false;
			var sReturnControl="Fehler";
				
			//Die benoetigten Kernel-Funktionen laden
			var objKernelLibs = new Array(); //ACHTUNG, NICHT LOESCHEN DOKU: objKernelLibs als eigenes Objekt in den Funktionsargumenten. Grund: Sonst müsste bei jedem objControlCaller Objekt die objKernelLibs erst ubergeben werden.
			var objControlCaller=new Object();
			var bReturn = enableKernelAntJs(objKernelLibs, sDirRepositoryJsscriptdef, objControlCaller);			
			if(!objControlCaller.bReturnControl){								
				bReturnControl=objControlCaller.bReturnControl;
				sReturnControl=objControlCaller.sReturnControl;
				sReturn="";
			}else{
				var objControlCallerImplode=new Object();
				sReturn=arrayStringImplodeJs(objKernelLibs, myArrayString, myDelimiter, myiIndexLow, myiIndexHigh, objControlCallerImplode);				
				if(!objControlCallerImplode.bReturnControl){									
					bReturnControl=false;
					sReturn="";
				}else{					
				}
				bReturnControl=objControlCallerImplode.bReturnControl;
				sReturnControl=objControlCallerImplode.sReturnControl;
			}	
			project.setProperty(attributes.get("returnstring"),sReturn);
			project.setProperty(attributes.get("returncontrol"),bReturnControl);
			project.setProperty(attributes.get("returncontrolstring"),sReturnControl);
						
			//###################################################################
            //#### KERNEL LIBS HINZUFÜGEN
            //###################################################################			
			function enableKernelAntJs(objKernelLibs, sDirSubDefault, objControl){			
				var sScript = "enableKernelAntJs: ";
				try{
					if(objKernelLibs==undefined || objKernelLibs==null){
						var err = new Error("objKernelLibs nicht deklariert.");
						throw err;
					}
					if(sDirSubDefault==undefined || sDirSubDefault==null){				
						sDirSubDefault="jsscriptdef";
					}else if(sDirSubDefault.trim()==''){
						sDirSubDefault="jsscriptdef";
					}
					eval('' + org.apache.tools.ant.util.FileUtils.readFully(new java.io.FileReader( '../'+sDirSubDefault+'/ZAnt.basic.zBasic.HandleKernelZZZ.js' )) ); //Zentrale Funktion, in der alle anderen Bibliotheken zur Verf�gung gestellt werden.
										
					var objControlCaller=new Object();
					usedKernelAntLibJs(objKernelLibs, sDirSubDefault, objControlCaller); //Rufe die zentrale Funktion auf, um die weiteren Bibliotheken einubinden.
					if(!objControlCaller.bReturnControl) throw new Error(sScript + objControlCaller.sReturnControl);	
						
					bReturnControl=true;
					sReturnControl=sScript+"Alles o.k.";
					bReturn=true;
				}catch(err){	
					//#### SIMPLES ERROR HANDLING #######
					print(sScript+"Fehler gefangen: " + err);
					bReturnControl=false;
					sReturnControl=sScript+"Fehler. "+ err;					
				}
				objControl.bReturnControl=bReturnControl;
				objControl.sReturnControl=sReturnControl;
				return bReturn;
			}
			
		//####################################################################################################					
		function arrayStringImplodeJs(objKernelLibs, myArrayString, myDelimiter, myiIndexLow, myiIndexMax, objControl){	 	
			var sScript=null;
			var sReturn="nixnix"; //Ziel dieses Tests ist es den Namen der in der Unterfunktion ermitteltent aufrufenden Funktion an die aufrufende Ant-Script-Ebene zurueckzugeben.
			var bReturnControl=false;
			var sReturnControl="Fehler";	
				
			try{															
				//IN JEDER FUNKTION DAS LADERN DER FUNKTIONEN PER EVAL AUSFUEHREN, SONST STEHEND DIE FUNKTIONEN NICHT ZUR VERFUEGUNG					
				if(objKernelLibs==undefined || objKernelLibs==null){
					print("Keine Kernel Ant Js Libs uebergeben.");
				} else {						
					if(objKernelLibs.length==0 || objKernelLibs.length==undefined){
						print("Keine Kernel Ant Js Libs vorhanden zum Laden");
					} else {
						print("Loading Kernel Ant Js Libs: " + objKernelLibs.length);
						for (var i = 0; i < objKernelLibs.length; i++) { 	
							//print("Lib: " + objKernelLibs[i]["ALIAS"]);					
							//print("LOADINGSTRING: " + objKernelLibs[i]["LOADINGSTRING"]);
							//funktioniert: 
							eval(''+objKernelLibs[i]["LOADER"]); //Loader-String einsetzen.
							//funktioniert nicht, is ein bissl zuviel: eval(objKernelLibs[i]["CODEEXECUTED"]);
							}
						}
					}
				enableJava();//Der Aufruf geht erst nachdem die Kernelbibliotheken geladen wurden		
				sScript = reflectMethodCurrent_Name(null, objControlCaller) + ": ";					
				if(!objControlCaller.bReturnControl) throw new Error(sScript + objControlCaller.sReturnControl);
				print(sScript + "START");				
				print("#######################");
				var objControlCallerImplode=new Object();				
				sReturn=arrayStringImplodeZZZ(myArrayString,myDelimiter,myiIndexLow,myiIndexHigh,objControlCallerImplode);
				if(!objControlCallerImplode.bReturnControl) throw new Error(sScript + objControlCallerImplode.sReturnControl);	
					
				bReturnControl=objControlCallerImplode.bReturnControl;
				sReturnControl=objControlCallerImplode.sReturnControl;
				bReturnControl=true;
			}catch(err){	
				//#### SIMPLES ERROR HANDLING #######
				print(sScript+"Fehler gefangen: " + err);
				//bReturnControl=false;
				//sReturnControl=sScript+"Fehler. " + err;	

				//#### ERROR HANDLING #######
				try{																
					//Wende Funktion an, zur Ermittlung der aktuellen Funktion
					var objControlErrh=new Object();//wichtig: Neues ErrorControl Objekt.										
					var myErrorString = handleError(err,objControlErrh);
					if(!objControlErrh.bReturnControl) throw new Error(sScript + objControlErrh.sReturnControl);										
					bReturnControl = false;
					sReturnControl= myErrorString;				
				}catch(e){
					print(e);					
					bReturnControl=false;
					sReturnControl=sScript+"Fehler im ErrorHandling. "+ e;
				}
			}
			objControl.bReturnControl=bReturnControl;
			objControl.sReturnControl=sReturnControl;			
			return sReturn;
		}			
     ]]>
	</scriptdef>
</project>